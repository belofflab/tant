import requests
import asyncio
import datetime
from typing import Union

from aiogram import types
from data.config import WORKER_PHOTO, SERVER_URL, WORKER_USERNAME
from database import models
from keyboards.user import inline
from loader import dp

MENU_CAPTION = """
‚ú®–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–ª–∞. –Ø –Ω—É–º–µ—Ä–æ–ª–æ–≥ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ú–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã.     
              
üí´–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ–±—è –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–π—Ç–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, —Å—Ç–∞—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º, —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∏ –∫–∞–π—Ñ–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –æ—Ç –∂–∏–∑–Ω–∏ –º—ã –¥–æ–ª–∂–Ω—ã –∑–Ω–∞—Ç—å —Å–≤–æ—é –∑–∞–¥–∞—á—É, —Ç.–µ. –¥–ª—è —á–µ–≥–æ –≤–æ–æ–±—â–µ —á–µ–ª–æ–≤–µ–∫ —Ä–æ–∂–¥–µ–Ω –∏ –Ω–∞ —á—Ç–æ –æ–Ω —Å–ø–æ—Å–æ–±–µ–Ω. 
üî•üî•–ò —è –ø–æ–º–æ–≥—É —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –í–∞—à–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏, —Ä–∞—Å–∫—Ä—ã—Ç—å –í–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —É–ª—É—á—à–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ. 
–° –ø–æ–º–æ—â—å—é —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π —è –º–æ–≥—É –ø—Ä–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –í–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞—Ü–µ–ª–µ–Ω–Ω—É—é –Ω–∞ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ –∂–∏–∑–Ω–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
üåø–ß–ï–ú–£ –í–ê–ú –ù–£–ñ–ù–û –ù–ê–£–ß–ò–¢–¨–°–Ø, –ê –ß–¢–û –î–û–°–¢–£–ü–ù–û –û–¢ –†–û–ñ–î–ï–ù–ò–Ø?
üåø–ë–£–î–ï–¢–ï –í–´ –≠–§–§–ï–ö–¢–ò–í–ù–´ –í –ö–û–ú–ê–ù–î–ù–û–ô –†–ê–ë–û–¢–ï –ò–õ–ò –í –û–î–ò–ù–û–ß–ö–£?
üåø–ö–ê–ö–û–ô –ü–ê–†–¢–ù–ï–† –í–ê–ú –ë–û–õ–¨–®–ï –í–°–ï–ì–û –ü–û–î–•–û–î–ò–¢?

‚ùì ü•≥–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏ –ø–æ–Ω—è—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ–± –∏ –æ—à–∏–±–æ–∫ –≤ –ø–æ–∏—Å–∫–∞—Ö —Å–µ–±—è? 
üí• üí•–î–ª—è —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç –≤–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:
–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è/–∏–º—è
"""

async def get_or_create_user(user_id: int, username: str, full_name: str) -> models.User:
    user = await models.User.query.where(models.User.idx == user_id).gino.first()
    if user is not None:
        to_update = {"is_active": True, "last_active": datetime.datetime.now()}
        if user.full_name != full_name or user.username != username:
            to_update["full_name"] = full_name
            to_update["username"] = username
        await models.User.update.values(**to_update).where(
                models.User.idx == user.idx
            ).gino.status()
        return user
    return await models.User.create(
        idx=user_id, username=username, full_name=full_name
    )

async def proceed_signin(message, worker_name):
    await get_or_create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
    requests.post(
        url=SERVER_URL + f"/users/?worker_name={worker_name}",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "worker": 567890, # WORKER ID 
        },
    )
async def save_user(worker_name: str, message: types.Message):
    requests.post(
            url=SERVER_URL + f"/users/?worker_name={worker_name}",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "worker": 567890, # WORKER ID 
            },
        )
    
async def update_user_touch(callback: types.CallbackQuery):
    requests.post(
            url=SERVER_URL + "/users/free/",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "worker": 567890,
            },
        )

@dp.message_handler(commands="start")
async def start(message: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    if isinstance(message, types.Message):
        from . import askeza
        account = message.get_args()
        if account == "askeza":
            await proceed_signin(message=message, worker_name=WORKER_USERNAME)
            return await askeza.list_buttons(callback=message, worker=WORKER_USERNAME)
        if account == "services":
            from .services import list_service_types
            await proceed_signin(message=message, worker_name=WORKER_USERNAME)
            return await list_service_types(callback=message,  worker=WORKER_USERNAME)
        if account == "taro":
            from .training import list_courses
            await proceed_signin(message=message, worker_name=WORKER_USERNAME)
            return await list_courses(callback=message, worker=WORKER_USERNAME)
        if account == "free":
            await proceed_signin(message=message, worker_name=WORKER_USERNAME)
            return await free(callback=message, worker=WORKER_USERNAME)
        if account not in [WORKER_USERNAME, ]:
            account = WORKER_USERNAME

        await get_or_create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        asyncio.get_event_loop().create_task(save_user(worker_name=WORKER_USERNAME, message=message))
        await message.answer_photo(
            photo=types.InputFile(WORKER_PHOTO),
            caption=MENU_CAPTION,
            reply_markup=await inline.menu_keyboard(worker=account),
        )
    elif isinstance(message, types.CallbackQuery):
        message: types.CallbackQuery
        await message.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.InputFile(WORKER_PHOTO),
                caption=MENU_CAPTION
            ),
            reply_markup=await inline.menu_keyboard(worker=kwargs.get("worker"))
        )

@dp.callback_query_handler(lambda c: c.data.startswith("free"))
async def free(callback: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    asyncio.get_event_loop().create_task(update_user_touch(callback=callback))
    if isinstance(callback, types.Message):
        worker = kwargs.get("worker")
        await callback.answer_photo(
        photo=types.InputFile(WORKER_PHOTO),
        caption=f"""
‚úÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º—è –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 
–ù–ê–ñ–ê–¢–¨ üëáüèª
‚≠êÔ∏è @{worker}
–ü—Ä–∏–º–µ—Ä: 23.03.1973 –ú–∞—Ä–∏—è
""",
        reply_markup=await inline.free_markup(worker=worker),
    )
    elif isinstance(callback, types.CallbackQuery):
        worker = callback.data.split("#")[-1]
        await callback.message.edit_caption(
            caption=f"""
‚úÖ–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º—è –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 
–ù–ê–ñ–ê–¢–¨ üëáüèª
‚≠êÔ∏è @{worker}
–ü—Ä–∏–º–µ—Ä: 23.03.1973 –ú–∞—Ä–∏—è
""",
            reply_markup=await inline.free_markup(worker=worker),
        )