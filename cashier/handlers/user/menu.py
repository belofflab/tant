import os
import re
import requests
import uuid
import base64
import random
import typing as t
from aiogram import types
from decimal import Decimal
from loader import dp, bot
from data.config import SERVER_URL, BASE_DIR, CHANNEL_ID
from aiogram.dispatcher import FSMContext
from states.receipt import ReceiptState
from states.user_payment_detail import UserPaymentDetail
from states.payout import PayoutState
from keyboards.user import inline

matrix = {
    "—Ö–∞—Ä–∞–∫—Ç–µ—Ä": {
        "1": [
            "–¢—ã –∫–ª–∞—Å—Å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å - –≤–ø–∏—Ç—ã–≤–∞–µ—à—å –∏–¥–µ–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π. –ò–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—à—å —á—Ç–æ-—Ç–æ —Å–≤–æ–µ –∏ –¥–µ–π—Å—Ç–≤—É–µ—à—å.",
            "–í –º–æ—Ä–µ –∏–¥–µ–π –∏ —á—É–∂–∏—Ö –º–Ω–µ–Ω–∏–π —Ç–µ–±–µ –≤–∞–∂–Ω–æ —Å–ª—ã—à–∞—Ç—å –°–ï–ë–Ø, –ø–æ—á–∞—â–µ —Å–ø—Ä–∞—à–∏–≤–∞–π '–ê —á—Ç–æ –Ø —Ö–æ—á—É?', —É–¥–µ–ª—è–π —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ –≤—Ä–µ–º—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É –∏ —Ö–æ–±–±–∏. –í—Å–ø–æ–º–Ω–∏ —Ç–µ –ø–µ—Ä–∏–æ–¥—ã, –∫–æ–≥–¥–∞ '–¥—É—à–∞ —Ä–∞–¥–æ–≤–∞–ª–∞—Å—å', —Ö–æ—Ç–µ–ª–æ—Å—å –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –∏ —Ç–≤–æ—Ä–∏—Ç—å, –∑–∞–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏. ",
            "–í–∞–∂–Ω–æ –æ–∫—Ä—É–∂–∞—Ç—å —Å–µ–±—è –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Ç—ã–≤–∞—Ç—å —Ç–µ–±—è –∏–¥–µ—è–º–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º.–ù–∞–π–¥–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –≥—Ä—É–ø–ø—É –ø–æ —Å–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –æ–±—â–∞–π—Å—è —Å –ª—é–¥—å–º–∏ –Ω–∞ –ª—é–±–∏–º—ã–µ –¥–ª—è —Ç–µ–±—è —Ç–µ–º—ã.–ü–æ—Å–µ—â–∞–π –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∏ –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ, —Ç–∞–º –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏, –Ω–æ –∏ –ø—Ä–æ–∫–∞—á–∞–µ—à—å –Ω–∞–≤—ã–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å–µ–±—è.",
        ],
        "11": [
            "–í—Å–µ –ª–∏ —Ç—ã —Ä–µ–∞–ª–∏–∑—É–µ—à—å, –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å? –ü–æ—Å–ø–æ—Ä–∏–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å–≤–æ–∏—Ö –∏–¥–µ–π —Ç—ã —É–∂–µ –æ—Å—É—â–µ—Å—Ç–≤–∏–ª/–æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∞. ",
            "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –¥–∞—Ç—å –¥–µ–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –∫–æ–ª–ª–µ–≥–µ, –¥—Ä—É–≥—É –∏–ª–∏ –±–ª–∏–∑–∫–æ–º—É. ",
            "–ß–∞—â–µ –≤—ã–±–∏—Ä–∞–π—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å—Ç–∞–Ω—å –∑–∞–º–µ—Ç–Ω–µ–µ –∏ –¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ —Å –º–∏—Ä–æ–º. –û—Ç–∫—Ä—ã—Ç–æ –≤—ã—Ä–∞–∂–∞–π —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è, –≤–µ–¥—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ —É—Å–ª—ã—à–∞—Ç —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç –∏ –ø–æ–π–¥—É—Ç –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π. ",
            "–¢—ã –∫–ª–∞—Å—Å–Ω—ã–π!!! –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –µ—â–µ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–µ–µ, –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Ä–æ–∫–∏ –≤–æ–∫–∞–ª–∞ –∏–ª–∏ –æ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞, —Ç–∞–∫ —á–µ—Ä–µ–∑ —Ä–µ—á—å –∏ –≥–æ–ª–æ—Å —Ç—ã –µ—â—ë –±–æ–ª—å—à–µ —Ä–∞—Å–∫—Ä–æ–µ—à—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.",
        ],
        "111": [
            "–í–∞—É!!!! –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∏–¥–µ–π!!!! –ù–∞—á–Ω–∏ –¥–µ–ª–∏—Ç—å—Å—è —Å –º–∏—Ä–æ–º —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –Ω–∞—Ä–∞–±–æ—Ç–∫–∞–º–∏, –Ω–∞–ø–∏—à–∏ –ø–æ—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π –≥—Ä—É–ø–ø—É, –∫—É–¥–∞ –ø–æ–∑–æ–≤–µ—à—å —Ç–µ—Ö, –∫–æ–º—É —Ç–≤–æ—è —Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞.",
            "–ò–¥–µ–π –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –º–Ω–æ–≥–æ, —á—Ç–æ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —à–∞–≥ —Ä–æ–∂–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–¥–µ—é!!! –ú–æ–∂–µ—à—å –≤—ã–ø–∏—Å—ã–≤–∞—Ç—å –∏—Ö –≤ —Ç–µ—Ç—Ä–∞–¥—å, –∞ –º–æ–∂–µ—à—å —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–æ—Ü—Å–µ—Ç–∏. –î–ª—è –∫–æ–≥–æ-—Ç–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—à—å –Ω–æ–≤—ã–º–∏ —Å–º—ã—Å–ª–∞–º–∏.",
            "–ù–∞–ø—Ä–∏–º–µ—Ä, —É –ø–æ–¥—Ä—É–≥–∏ –µ—Å—Ç—å –±–ª–æ–≥, –∏ —Ç—ã –≤–∏–¥–∏—à—å, –∫–∞–∫ –µ–π –ª—É—á—à–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–¥–µ–ª–∏—Å—å —Å –Ω–µ–π —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É.",
            "–ò –¥–∞, –∫–æ–≥–¥–∞ –æ–±–µ—â–∞–µ—à—å, –±–µ—Ä–∏ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ —Å–º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å üòú",
        ],
    },
    "—ç–Ω–µ—Ä–≥–∏—è": {
        "2": [
            "–¢–∞–∫-—Ç–∞–∫, —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–±—è –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–≥–∞—é—Ç. –î–æ–±–∞–≤–ª—è–π —Å–ø–æ—Ä—Ç –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–µ–±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ, —á–∏—Å—Ç–æ –¥–ª—è —Å–µ–±—è, –≤—ã–±–∏—Ä–∞–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º–∏, –ª—é–¥—å–º–∏, —É–º—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä—É–¥–æ–º.",
            "–ù–∞–±–ª—é–¥–∞–π, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Å–µ—Ç –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏ –∏ –æ–∫—Ä—É–∂–∞–π —Å–µ–±—è —Ç–µ–º–∏, –∫—Ç–æ –∫–ª–∞—Å—Å–Ω–æ –∑–∞—Ä—è–∂–∞–µ—Ç –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –ø–æ–∑–∏—Ç–∏–≤–æ–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.",
            "–û—Ä–≥–∞–Ω–∏–∑—É–π —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–Ω–∞, –¥–ª—è —Ç–µ–±—è —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ.",
            "–ü—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ, —á—Ç–æ–±—ã —ç–º–æ—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –Ω–µ –º–µ—à–∞–ª–∏ —Ç–µ–±–µ –ß–£–í–°–¢–í–û–í–ê–¢–¨ –°–ï–ë–Ø.",
        ],
        "22": [
            "–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ç–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–∏ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Ç–µ–±—è —Å–∞–º–æ–≥–æ? –ò–ª–∏ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏?",
            "–ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —ç–Ω–µ—Ä–≥–∏–∏ –º–∞–ª–æ–≤–∞—Ç–æ, –º–æ–∂–Ω–æ –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –¥—É—Ö–æ–≤–Ω—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —ç–Ω–µ—Ä–≥–∏—é (–∞—Å–∫–µ–∑–∞, —Ä–∞–Ω–Ω–∏–π –ø–æ–¥—ä–µ–º). ",
            "–ê –º–æ–∂–Ω–æ –µ–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ø–æ—Å–∏–ª—å–Ω–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏: —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—è —Ö–æ—Ç—å–±–∞, –±–∞—Å—Å–µ–π–Ω, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –ª–µ—Å—É.",
            "–ê —á—Ç–æ –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –º–Ω–æ–≥–æ? –¢–æ–≥–¥–∞ —Å–º–µ–ª–æ –¥–∞—Ä–∏ –ø–æ–ª—å–∑—É —á–µ—Ä–µ–∑ —ç—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º: –æ–≤–ª–∞–¥–µ–π —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –º–∞—Å—Å–∞–∂–∞, –ø—Ä–æ–≤–µ–¥–∏ –º–∏–Ω–∏-—ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ —Å–≤–æ–µ–º—É –∫—Ä–∞—é, –ø–æ–º–æ–≥–∏ —Å–æ—Å–µ–¥–∫–µ —Å –æ–≥–æ—Ä–æ–¥–æ–º –∏–ª–∏ –∑–∞–π–º–∏—Å—å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–∑–≥—Ä—É–∂–∞—Ç—å —Ç–µ–ª–æ –æ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è.",
        ],
        "222": [
            "–£–∞—É!!! –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —ç–Ω–µ—Ä–≥–∏–∏!!!! –¢—Ä—É–¥–æ–ª—é–±–∏–µ –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - —Ç–≤–æ–µ –∫—Ä–µ–¥–æ –ø–æ –∂–∏–∑–Ω–∏!!!!",
            "–ß–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç—ã —Ä–µ–∞–ª–∏–∑—É–µ—à—å—Å—è –≤ –º–∏—Ä, –∞ –µ—â–µ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç –¥—Ä—É–≥–æ–º—É!!!",
            "–≠–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –º–Ω–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–ø–∞—Ö–∞—Ç—å –Ω–µ–ø–∞—Ö–∞–Ω–Ω–æ–µ –ø–æ–ª–µ, –∏ –ø—Ä–∏–π—Ç–∏ –∫ —Å–≤–æ–∏–º —Ç–≤–µ—Ä–¥—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.",
            "–°–∏–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è, —Ö–∞—Ä–∏–∑–º–∞, —É–º–µ–Ω–∏–µ –≤–ª–∏—è—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è - —ç—Ç–æ –≤—Å–µ –ø—Ä–æ —Ç–µ–±—è!!! –î–∞- –¥–∞, —ç—Ç–æ –Ω–µ –æ–ø–µ—á–∞—Ç–∫–∞, –¥–µ–π—Å—Ç–≤—É–π, –≤—Å–µ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è!!!!",
        ],
    },
    "–∏–Ω—Ç–µ—Ä–µ—Å": {
        "–ø—É—Å—Ç–æ": [
            "–¢—ã —Å–≤–æ–±–æ–¥–µ–Ω –æ—Ç –Ω–∞–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤!!!! –¢—ã –¥–∞–∂–µ –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç–∞–∫ –∫–æ–≥–¥–∞-—Ç–æ –Ω–æ–≤—ã–º–∏ –±—ã–ª–∏ –∞—Ä–æ–º–∞—Å—Ç–∏–ª–∏—Å—Ç –∏–ª–∏ –≥—Ä—É–º–µ—Ä) –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ (–Ω–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–∞ - –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç –∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞). ",
            "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ - –≤–æ—Ç —Ç–≤–æ—è —Å–∏–ª–∞!!! –ù–µ –±–æ–π—Å—è –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –º–∏—Ä—É –∏–¥–µ–∏ –≤ —Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∏–¥–∏—à—å —ç—Ç–æ –¢–´.",
            "–í–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ? –í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –Ω–∞—É—á–∞–µ—à—å –ª—é–¥–µ–π –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ.",
            "–ò–¥–∏ —Å–≤–æ–∏–º –ø—É—Ç–µ–º, –ø—Ä–∏–º–∏ —Ç–æ, —á—Ç–æ —Ç—ã –Ω–µ —Ç–∞–∫–æ–π, –∫–∞–∫ –≤—Å–µ!!! –û–±—Ö–æ–¥–∏ –ø–∞–Ω–∏–∫–µ—Ä–æ–≤ —Å—Ç–æ—Ä–æ–Ω–æ–π, —Ç–µ–±–µ –≤–∞–∂–µ–Ω —Ç–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—É—Ç—å!!!",
        ],
        "3": [
            "–¢–µ–±–µ –≤–æ–æ–±—â–µ –ø–æ–≤–µ–∑–ª–æ!!! –¢—ã —á–µ—Ç–∫–æ –æ—â—É—â–∞–µ—à—å –ø–æ–Ω—è—Ç–∏—è '–º–æ–∏ –≤–µ—â–∏', '–º–æ–∏ –ª—é–¥–∏', '–º–æ—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è'.",
            "–ó–Ω–∞–µ—à—å, –∫—É–¥–∞ –≤–ª–æ–∂–∏—Ç—å—Å—è, –≥–¥–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å –∫–µ–º –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã—Ö –ª—é–¥–µ–π.",
            "–õ–µ–≥–∫–æ –≤–Ω–µ–¥—Ä—è–µ—à—å —á—É–∂–æ–π –æ–ø—ã—Ç –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—à—å —Å–≤—è–∑–∏, –º–æ–∂–µ—à—å –æ–±—É—á–∞—Ç—å—Å—è –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—å –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
            "–ó–∞–º–µ—á–∞–π, –ª–µ–≥–∫–æ –ª–∏ —Ç–µ–±–µ –¥–µ–ª–∏—Ç—å—Å—è? –í—ã–π—Ç–∏ –≤ —Å–æ—Ü—Å–µ—Ç—å —Å '–≥–æ–≤–æ—Ä—è—â–µ–π –≥–æ–ª–æ–≤–æ–π' –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –∫—Ä–∞—Å–æ—á–Ω–æ –ø–æ–≤–µ–¥–∞—Ç—å –æ —Å–≤–æ–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏, –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–∏–¥—ã —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤. ",
            "–ü–æ–º–Ω–∏, –º–∏—Ä –ª—é–±–∏—Ç –±–∞–ª–∞–Ω—Å, –±—É–¥—å —Ç–µ–º, –∫—Ç–æ —Å–æ–±–ª—é–¥–∞–µ—Ç —ç—Ç–æ—Ç –±–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è.",
        ],
        "333": [
            "–¢—ã –∫–∞–∫ –≤–æ–ª—à–µ–±–Ω–∞—è —à–∫–∞—Ç—É–ª–∫–∞ - —É–º–µ–µ—à—å –±–µ—Ä–µ—á—å —Å–∞–º–æ–µ –ª—É—á—à–µ–µ!!! –¢—ã —Ü–µ–Ω–∏—à—å —Å–≤–æ–π –æ–ø—ã—Ç –∏ –æ–ø—ã—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –ø–æ–¥–º–µ—á–∞–µ—à—å –∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ—à—å —á—Ç–æ-—Ç–æ –±–û–ª—å—à–µ–µ!!!",
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –ª—é–±–∏—à—å –æ–±—É—á–∞—Ç—å—Å—è, —É–∑–Ω–∞–≤–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø–æ–∫—É–ø–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ —Ö–æ–±–±–∏, —Å–æ–±–∏—Ä–∞—Ç—å –¥—Ä—É–∑–µ–π –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏—Ä–æ–¥—ã. ",
            "–†–∞—Å—Å–∫–∞–∂–∏ –±–ª–∏–∑–∫–∏–º –∏–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –ø–∏—à–µ—à—å —Å—Ç–∏—Ö–∏ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ª—é–±–∏—à—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–ª–∏ –∫—Ä—É—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Å–∫–ª–æ–Ω—ã - —Å—É–º–µ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, —Ç–∞–∫ —Ç–≤–æ–π —Ç–∞–ª–∞–Ω—Ç —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è –≤–æ –≤—Å–µ–π –∫—Ä–∞—Å–µ!!! ",
            "–ê –∫–æ–≥–¥–∞ –æ—â—É—â–∞–µ—à—å —Å–µ–±—è –≤ '–±–æ–ª–æ—Ç–µ', –∑–Ω–∞—á–∏—Ç —Å–Ω–æ–≤–∞ –ø–æ—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–∞—É–∫–∏, —Ö–æ–±–±–∏ –∏ –º–µ—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–∏–¥, –≤–µ–¥—å –ø–æ—Ä–æ–π –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ —Ç–∞–∫ –æ—Ç—è–≥–æ—â–∞–µ—Ç –Ω–∞—à—É –¥—É—à—É.",
        ],
    },
    "–∑–¥–æ—Ä–æ–≤—å–µ": {
        "–ø—É—Å—Ç–æ": {
            "–¢—ã, –∫–æ–Ω–µ—á–Ω–æ, –∫—Ä–∞—Å–∞–≤—á–∏–∫ –∏–ª–∏ –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ - —É–º–µ–µ—à—å –∂–∏—Ç—å –∫–∞–∫ —Ö–æ—á–µ—à—å, –∏–∑ —Å–≤–æ–µ–π –ª–∏—á–Ω–æ–π –≤—ã–≥–æ–¥—ã.",
            "–°–ª—É—à–∞–π, –∞ —Ç—ã —á–∞—Å—Ç–æ —Ä–∞–∑–¥–∞–µ—à—å —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏? –ê, –º–æ–∂–µ—Ç, –≤–ø–∞–¥–∞–µ—à—å –≤ –∂–µ—Ä—Ç–≤—É –∏ –¥—É–º–∞–µ—à—å, —á—Ç–æ –≤—Å–µ –≤–∏–Ω–æ–≤–∞—Ç—ã?",
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤, –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞, –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∏ –µ–≥–æ –ø—Ä–æ—Å—å–±—ã. –ü–æ—Ä–æ–π —Ç–µ–±–µ —Å–ª–æ–∂–Ω–æ —Å–¥–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –æ—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π –∏ –Ω–µ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –Ω–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å –ª—é–¥—å–º–∏ –∏ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –≤ –∫–æ–º–∞–Ω–¥–µ.",
        },
        "4": [
            "–¢—ã –∫–ª–∞—Å—Å–Ω–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤, –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–æ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –æ–∑–æ—Ä–Ω–æ–π.",
            "–ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –∏ –±–µ—Ä–µ–∂–µ—à—å —Å–≤–æ–∏. –£ —Ç–µ–±—è –µ—Å—Ç—å —á–µ—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –≤ –æ–¥–∏–Ω–æ—á–∫—É.",
            "–û—Å–æ–∑–Ω–∞–µ—à—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞ –∏ –≥–æ—Ç–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã. –î–∞, —É –≤—Å–µ—Ö —É –Ω–∞—Å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –Ω–æ –¥–ª—è –æ–±—â–∏—Ö —Ü–µ–ª–µ–π  —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º!!!!",
        ],
        "444": [
            "–ü–æ—Å—Ç–æ–π, —á—Ç–æ —Ç—ã —Ç–∞–º –ø—Ä—è—á–µ—à—å? –ê, —Ç–∞–∫ —ç—Ç–æ –∂–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.–¢—ã —Å–∫–∞–∂–µ—à—å: '–ö–∞–∫–æ–π –∏–∑ –º–µ–Ω—è —É–ø—Ä–∞–≤–ª–µ–Ω–µ—Ü?'. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç—ã –ª—é–±–∏—à—å –π–æ–≥—É, —Å–æ–∑–¥–∞–π —Å–≤–æ—é –≥—Ä—É–ø–ø—É –ø–æ –∑–∞–Ω—è—Ç–∏—è–º –π–æ–≥–æ–π –∏ —Ä–µ–∞–ª–∏–∑—É–π —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.",
            "–¢—ã —Å—É–ø–µ—Ä—Å–∫–∏ —É–º–µ–µ—à—å –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ª—é–¥–µ–π –æ–¥–Ω–æ–π –∏–¥–µ–µ–π –∏ –≤–µ—Å—Ç–∏ –∑–∞ —Å–æ–±–æ–π. –°—Ñ–µ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π: –±–∏–∑–Ω–µ—Å, –¥—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Å–ø–æ—Ä—Ç, —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å, –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–æ—á–µ–µ.",
            "–í –ø–ª—é—Å–µ —É —Ç–µ–±—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –≤ –º–∏–Ω—É—Å–µ - –∫—Ä–∏—Ç–∏–∫–∞–Ω—Å—Ç–≤–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å.",
            "–í–µ—Ä—å –≤ —Å–µ–±—è –∏ –≤ –ª—é–¥–µ–π, –¥–µ–ª–µ–≥–∏—Ä—É–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—ä—è—Å–Ω—è–π –∏—Ö –∑–æ–Ω—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –¥–µ—Ä–∂–∏ —Å–ª–æ–≤–æ –∏ –≤—Å–µ —Å–ª–æ–∂–∏—Ç—Å—è –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º –¥–ª—è —Ç–µ–±—è!!!!",
        ],
    },
    "–ª–æ–≥–∏–∫–∞": {
        "–ø—É—Å—Ç–æ": [
            "–í—ã–±–∏—Ä–∞–π –æ–∫—Ä—É–∂–µ–Ω–∏–µ!!! –í–∞–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–µ—Ö, –∫—Ç–æ –¥–∞—Ä–∏—Ç —Ç–µ–±–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏, —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –±–æ–¥—Ä–æ–≥–æ –¥—É—Ö–∞!!!",
            "–ù–∞–ø–æ–ª–Ω—è–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è –∫—Ä–∞—Å–∏–≤—ã–º–∏ –≤–µ—â–∞–º–∏, –ø—Ä–∏—è—Ç–Ω–æ–π –º—É–∑—ã–∫–æ–π, –∫–ª–∞—Å—Å–Ω—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏. –ê—Ö, –¥–∞!!!!",
            "–ù–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—Å–Ω–æ–≤–µ –≤–∫–ª—é—á–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å —Ö–æ–±–±–∏:—Ä–∏—Å–æ–≤–∞–Ω–∏–µ, –≤–æ–∫–∞–ª, –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –∏–ª–∏ –æ–¥–µ–∂–¥—ã, –ø–æ—ç–∑–∏—é, —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–∏–¥ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.",
            "–ë—ã–≤–∞–µ—Ç —Ç–∞–∫, —á—Ç–æ –Ω–µ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤–æ–ª–Ω—É –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –º–æ–∂–µ—à—å –≤—ã—Ä–∞–∑–∏—Ç—å –ø—Ä–∞–≤–¥—É –≤ –∂–µ—Å—Ç–∫–æ–π, –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ, —Å—Ç–∞—Ä–∞–π—Å—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å, —á—Ç–æ–±—ã –Ω–µ –æ–±–∏–¥–µ—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
        ],
        "5": [
            "–ó–Ω–∞–µ—à—å, –º–Ω–æ–≥–∏–µ —Ç–∞–∫ –ø–æ–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ —Ä–∞–±–æ—Ç—É –∏ –±—ã—Ç, —á—Ç–æ –∑–∞–±—ã–≤–∞—é—Ç –ø—Ä–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ... –ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ –∏–∑ —Ç–∞–∫–∏—Ö",
            "–í—ã–±–µ—Ä–∏, –≤ —á–µ–º —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è –±–æ–ª—å—à–µ –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è, —É —Ç–µ–±—è –º–æ–∂–µ—Ç –∑–¥–æ—Ä–æ–≤–æ –ø–æ–ª—É—á–∞—Ç—å—Å—è –≤—Å–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫—Ä–∞—Å–æ—Ç–æ–π –∏ —ç—Å—Ç–µ—Ç–∏–∫–æ–π. –ê –º–æ–∂–µ—Ç, —Ç—ã –ø—Ä–∏—Ä–æ–∂–¥–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç, –ø–æ—ç—Ç –∏–ª–∏ —Å—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞.",
            "–£–º–µ–µ—à—å –ø–æ–π–º–∞—Ç—å '–≤–æ–ª–Ω—É' —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –¥–æ–Ω–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –¥—É—à–µ–≤–Ω–æ–º —É—Ä–æ–≤–Ω–µ.",
            "–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –≤–µ–¥—å –æ—Ç —É–ª—ã–±–∫–∏ –∫–∞–∂–¥—ã–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á—É—Ç–æ—á–∫—É —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ!!!",
        ],
        "555": [
            "–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å —à–µ–¥–µ–≤—Ä—ã!!! –ù–∞–≤–µ—Ä–Ω—è–∫–∞ —Å–ª—ã—à–∞–ª –ø—Ä–æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞, —Ç–∞–∫ –≤–æ—Ç —Ç–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫–∞–∫ —É  –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è!!!",
            "–¢—ã –º–æ–∂–µ—à—å –¥–æ–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –¥–æ –¥—É—à–∏ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —á—É–¥–µ—Å–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∞ –≥–∞—Ä–¥–µ—Ä–æ–± –≤ —Å—Ç–∏–ª—å–Ω—ã–µ –ª—É–∫–∏. –ú–æ–∂–µ—à—å –≤–æ–æ–±—â–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!!!! –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å, –∫–∞–∫ —Ç—ã –∫—Ä—É—Ç!!!",
            "–¢—ã —Ö–æ—Ä–æ—à–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä—É–µ—à—å —Å –¥–µ—Ç—å–º–∏, –º–æ–∂–µ—Ç –¥–∞–∂–µ –ª—é–±–∏—à—å —Å—Ü–µ–Ω—É, —Ç–∞–Ω—Ü—ã –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–ª–∏–∫–∏ –∏ —Ñ–æ—Ç–æ. –°–µ–π—á–∞—Å —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ!!!",
            "–û—Å—Ç–µ—Ä–µ–≥–∞–π—Å—è —Ä–µ–≤–Ω–æ—Å—Ç–∏ –∏ –æ–±–∏–¥, –æ–Ω–∏ –¥–∞–ª–µ–∫–æ –Ω–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —Ç–≤–æ–∏–º –º–µ—á—Ç–∞–º.",
        ],
    },
    "—Ç—Ä—É–¥": {
        "–ø—É—Å—Ç–æ": [
            "–¢–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ç–µ, –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç, –∏–¥—É—Ç –∑–∞ —Ç–æ–±–æ–π,  –∏ —Ç–µ, –∫—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–≥–Ω—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ç–µ–±—è –Ω–µ –≤–µ—Ä—è—Ç. –í–æ—Ç, –∏–∑–±–∞–≤–ª—è–π—Å—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö!!!",
            "–í—ã–±–∏—Ä–∞–π —Ä–∞–±–æ—Ç—É, –≥–¥–µ –Ω–µ –Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ –∫–æ–ø–∞—Ç—å—Å—è –≤ —Ü–∏—Ñ—Ä–∞—Ö –∏ –∑–Ω–∞–Ω–∏—è—Ö, —ç—Ç–æ —Ç–µ–±—è –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç.",
            "–ê –ø—Ä–∏ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö –¥–∞–π —Å–µ–±–µ –≤—Ä–µ–º—è, –∏ –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏–µ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ.",
            "–¢—ã —á–µ–ª–æ–≤–µ–∫ –ª–µ–≥–∫–∏–π –Ω–∞ —Å–º–µ–Ω—É –∫–∞–∫–∏—Ö-—Ç–æ —É–±–µ–∂–¥–µ–Ω–∏–π –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. ",
            "–ü—Ä–∞–≤–¥–∞ —Ç–µ–±–µ —á—É—Ç—å –±–æ–ª—å—à–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –¥—Ä—É–≥–∏–º, —á—Ç–æ–±—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –∏ –¥–æ–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç –∏–ª–∏ —Å–º–µ—Ç—É. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –±–ª–∏–∑–∫–∏—Ö, —á—Ç–æ–±—ã –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–ª–∏ –∏ –æ—Ç–∫–ª—é—á–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤ —Å—Ä–æ–∫!!!!",
        ],
        "6": [
            "–¢—ã —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ –∫–∞–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ.",
            "–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ –∑–∞–≤–∏—Å–∏—à—å –æ—Ç –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π.",
            "–ù–µ —Å—Ç—Ä–µ–º–∏—à—å—Å—è –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º, —Ç–≤–µ—Ä–¥–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—è –∏–º–µ–Ω–Ω–æ –°–í–û–ò —Ü–µ–Ω–Ω–æ—Å—Ç–∏.",
            "–†–∞—Å—Å–ª–∞–±—å—Å—è, –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏–∫–æ–º—É –Ω–∏—á–µ–≥–æ –¥–æ–∫–∞–∑—ã–≤–∞—Ç—å, —É —Ç–µ–±—è –≤–Ω—É—Ç—Ä–∏ —á–µ—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ '–ö—Ç–æ —è' –∏ '–ß—Ç–æ —è –º–æ–≥—É'.",
            "–ò –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–≤–æ–µ —Ö–æ–±–±–∏ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –µ—â–µ –∏–ª–∏ —É–∂–µ –Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã, —ç—Ç–æ —Ç–µ–±—è –Ω–∏–∫–∞–∫ –Ω–µ —Å–º—É—Ç–∏—Ç, –∞ –ª–∏—à—å –ø–æ–¥–æ–≥—Ä–µ–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –≤ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–º –∏–∑—É—á–µ–Ω–∏–∏ –ª—é–±–∏–º–æ–≥–æ –¥–µ–ª–∞.",
        ],
        "666": [
            "–ó–∞–¥–∞—Ç–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∞—É—á–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!!! –í–æ—Ç —ç—Ç–æ —Å—é—Ä–ø—Ä–∏–∑: —Ç—ã —É–º–µ–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –≥–æ–¥—ã –≤–ø–µ—Ä–µ–¥, –≥–ª—É–±–æ–∫–æ –∏–∑—É—á–∞–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º—ã—Å–ª–∏—à—å –∫–∞–∫ –±—ã –Ω–∞–¥ –≤—Ä–µ–º–µ–Ω–µ–º, –Ω–∞–¥ –ª—é–¥—å–º–∏.",
            "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –≥–µ–Ω–∏–∞–ª–µ–Ω!!! –ò–∑–æ–±—Ä–µ—Ç–∞–µ—à—å —Ç–æ, —á—Ç–æ —Å—Ç–∞–Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏!!",
            "–¢—ã –∫–ª–∞—Å—Å–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
            "–ù–µ —Å–ø–µ—à–∏ –æ–±–∏–∂–∞—Ç—å—Å—è, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–≤–æ–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, –≤—Å–µ–º—É —Å–≤–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∏–ª–∏ –≤ —Ö–æ–±–±–∏. –ê –≤ –æ–±—â–µ–Ω–∏–∏ –æ—Å—Ç–∞–≤–∞–π—Å—è –ß–ï–õ–û–í–ï–ö–û–ú.",
        ],
    },
    "—É–¥–∞—á–∞": {
        "–ø—É—Å—Ç–æ": [
            "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –¥–æ–≤–µ—Ä—è–µ—à—å —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É? –ù—É –∏–ª–∏ –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ, –∫–∞–∫ –º–æ–≥–ª–æ –±—ã—Ç—å.",
            "–†–∞–∑—É–º, –ª–æ–≥–∏–∫–∞, —Ñ–∞–∫—Ç—ã - —ç—Ç–æ —Ç–≤–æ–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∂–∏–∑–Ω–∏.",
            "–ê —á—Ç–æ, –µ—Å–ª–∏ —Ç—ã –Ω–∞—á–Ω–µ—à—å –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É? –ù–∞–≤–µ—Ä–Ω—è–∫–∞, –∫–∞–∂–¥—ã–π —Ç–∞–∫–æ–π —à–∞–≥ –æ—Ç–∫—Ä–æ–µ—Ç —á—É–¥–µ—Å–Ω—ã–π –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫ –∂–∞–∂–¥–µ—Ç —Ç–≤–æ—è –¥—É—à–∞.",
            "–°–º–µ–ª–µ–π, –¥–æ–≤–µ—Ä—è–π –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º –∏–º–ø—É–ª—å—Å–∞–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–π –¥–ª—è —Å–µ–±—è –Ω–æ–≤—É—é, –ø–æ–ª–Ω—É—é —è—Ä–∫–∏—Ö –∫—Ä–∞—Å–æ–∫ –ñ–ò–ó–ù–¨!!!",
        ],
        "7": [
            "–¢—ã –∑–Ω–∞–ª, —á—Ç–æ —Ç–µ–±–µ –ª–µ–≥—á–µ, —á–µ–º –¥—Ä—É–≥–∏–º? –¢—ã –∏–¥–µ—à—å –ø–æ –∑–æ–≤—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–¥—Ü–∞.",
            "–ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Ç–µ–±—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∏ –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏  —Ä–æ–∂–¥–∞–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏—è, —Ç—ã —Å—Ä–∞–∑—É –¥–µ–π—Å—Ç–≤—É–µ—à—å –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏–º–ø—É–ª—å—Å–∞.",
            "–°–ª–æ–≤–Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∞–Ω—Ç–µ–Ω–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≤–Ω–µ—à–Ω–∏–º –ø–æ—Ç–æ–∫–∞–º, –∏ —Ç—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, —á—Ç–æ –±—É–¥–µ—à—å –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ.",
            "–¢—ã —É–º–µ–µ—à—å —Å–ª—ã—à–∞—Ç—å –∑–Ω–∞–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π –∏ —á—É–≤—Å—Ç–≤—É–µ—à—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–ª—è —Å–µ–±—è —Å–∏—Ç—É–∞—Ü–∏—é.",
        ],
        "777": [
            "–ü–æ–º–æ–≥–∞–π –ª—é–¥—è–º –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å. –ë—ã–≤–∞–µ—Ç —Ç–∞–∫, —á—Ç–æ –¥–∞–∂–µ –Ω–µ –ø—Ä–æ—Å–∏–ª–∏, –∞ —Ç—ã —É–∂–µ –±–µ–∂–∏—à—å —Å–ø–∞—Å–∞—Ç—å.",
            "–ß–∞—â–µ –¥—É–º–∞–π –æ —Å–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏—è—Ö. ",
            "–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–∞—Ä —Å—á–∏—Ç—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –º—ã—Å–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ—Ç–∞—é—Ç –≤ –≤–æ–∑–¥—É—Ö–µ. ",
            "–ò–Ω–æ–≥–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å: '–û —Å–¥–µ–ª–∞–π –≤–æ—Ç —ç—Ç–æ, —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –∏–ª–∏ '–ù–µ —Ö–æ–¥–∏ —Ç—É–¥–∞, —Ç–∞–º –¥–ª—è —Ç–µ–±—è –æ–ø–∞—Å–Ω–æ, –∏ —Ç–∞–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤–¥–∏–≤—ã.",
            "–ß–µ–º –±–æ–ª—å—à–µ —Å–µ–º–µ—Ä–æ–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ, —Ç–µ–º –∑–∞ –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Ç—ã –¥—É—à–µ–≤–Ω–æ –±–µ—Ä–µ—à—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ë–µ—Ä–µ–≥–∏ —Å–µ–±—è!!!",
        ],
    },
    "–¥–æ–ª–≥": {
        "–ø—É—Å—Ç–æ": [
            "–§—É—Ö, –ø–æ–ª–µ–≥—á–µ!!! –û—â—É—â–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å. –î–∞, —ç—Ç–æ –∫–ª–∞—Å—Å–Ω–æ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—è—â–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ –≤ –±—ã—Ç—É –∏ —Å –±–ª–∏–∑–∫–∏–º–∏ (—Å –º—É–∂–µ–º, —Å —Å—ã–Ω–æ–º) ",
            "–ë–æ–ª—å—à–µ –¥–æ–≤–µ—Ä—è–π –¥—Ä—É–≥–∏–º –ª—é–¥—è–º, –≤—Å—Ç—É–ø–∞–π –Ω–∞ –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω—É—é —Ç—Ä–æ–ø—É –∏ –≤—ã—Ö–æ–¥–∏ –∏–∑ –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞.",
            "–ê —á—Ç–æ –µ—Å–ª–∏ —Ç–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ø–µ—Ä–µ–¥ –∏ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –µ—â–µ –±–æ–ª—å—à–µ–º—É —Å—á–∞—Å—Ç—å—é –∏ —Ç–≤–æ–∏–º —Ü–µ–ª—è–º?",
            "–†–∏—Å–∫–Ω–∏ –ø–æ–π—Ç–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –í—Å–µ–ª–µ–Ω–Ω–æ–π, –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –¥–∞–µ—Ç —Ç–æ, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. –î–∞, —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫–æ–π –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ —Ç—ã –¥–∞–µ—à—å —Å–≤–µ—Ä—à–∏—Ç—å—Å—è —á—É–¥—É, –∫–æ—Ç–æ—Ä–æ–µ —Ç–∞–∫ –∂–∞–∂–¥–µ—Ç —Ç–≤–æ—è –¥—É—à–∞.",
        ],
        "8": [
            "–¢—ã —á–µ—Ç–∫–æ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–≤—è–∑—å –º–µ–∂–¥—É –ø—Ä–∏—á–∏–Ω–æ–π –∏ —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º, –ø–æ–Ω–∏–º–∞–µ—à—å –∑–∞–∫–æ–Ω—ã –ø—Ä–∏—Ä–æ–¥—ã, –∑–∞–∫–æ–Ω—ã –í—Å–µ–ª–µ–Ω–Ω–æ–π.",
            "–¢—ã –¥–æ–≤–µ—Ä—è–µ—à—å –º–∏—Ä—É, –æ—Å–æ–∑–Ω–∞–µ—à—å, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫.",
            "–£–º–µ–µ—à—å –∏–¥—Ç–∏ —Å–≤–æ–µ–π –¥–æ—Ä–æ–≥–æ–π.",
            "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–µ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –≤—ã—à–µ –Ω–æ—Ä–º—ã. –ê –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—å–º–µ—Ä–æ–∫ —É —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —á–∞—Å—ã.",
        ],
        "888": [
            "–í—Å–ø–æ–º–Ω–∏, –º–æ–∂–µ—Ç –∫–æ–≥–¥–∞-—Ç–æ —Ç—ã —É–≤–ª–µ–∫–∞–ª—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π –∏–ª–∏ –¥—É—Ö–æ–≤–Ω—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏, –∫–æ—Ä–º–∏–ª –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –∏–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∏–ª –≤ —Ö–æ—Å–ø–∏—Å–µ. –≠—Ç–æ —á–∞—Å—Ç—å —Ç–≤–æ–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è - —Å–ª—É–∂–∏—Ç—å –Ω–∞ –±–ª–∞–≥–æ –ª—é–¥—è–º.",
            "–£ —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —è—Å–Ω–æ–∑–Ω–∞–Ω–∏–µ, —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ª–æ–≥–∏—á–µ—Å–∫–∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–æ–±—ã—Ç–∏–π, –Ω–æ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫.",
            "–ò–Ω–æ–≥–¥–∞ –≤ –ø–æ–≥–æ–Ω–µ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º, —ç—Ç–æ—Ç –¥–∞—Ä  —É–ª–µ—Ç—É—á–∏–≤–∞–µ—Ç—Å—è –£—Å–º–∏—Ä—è–π –≥–æ—Ä–¥—ã–Ω—é, –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ —Ö–æ–±–±–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–π —Å–≤–æ—é –º–∏—Å—Å–∏—é. –¢—ã –ø–æ—Å–ª–∞–Ω–Ω–∏–∫ –ë–æ–≥–∞ –Ω–∞ —ç—Ç–æ–π –ó–µ–º–ª–µ!!!!",
        ],
    },
    "–ø–∞–º—è—Ç—å": {
        "9": [
            "–õ—é–±–∏—à—å –º–∞—Å—à—Ç–∞–±–Ω–æ –ø–æ–º–µ—á—Ç–∞—Ç—å –∏ –ø–æ—Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å, –≤–µ–¥—å —Ç–∞–∫? '–•–æ—á—É, —á—Ç–æ–±—ã –±—ã–ª –º–∏—Ä –≤–æ –≤—Å–µ–º –º–∏—Ä–µ', '–•–æ—á—É, —á—Ç–æ–±—ã —ç–∫–æ–ª–æ–≥–∏—è –±—ã–ª–∞ —Ö–æ—Ä–æ—à–µ–π'",
            "–ê —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–ª—è —Å–µ–±—è —Å–∞–º–æ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
            "–ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–µ –Ω–∞ —Ñ–æ—Ä–º—É (–≤ –∫–∞–∫–æ–º –≤–∏–¥–µ, –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —ç—Ç–æ –ø—Ä–∏—à–ª–æ), –∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —ç—Ç–æ –¥–æ–±–∞–≤–∏—Ç —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π –∏ –æ—Ç–∫—Ä–æ–µ—Ç –º–Ω–æ–≥–∏–µ –¥–æ—Ä–æ–≥–∏.",
            "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å –æ–ø—Ä–∞–≤–¥—ã–≤–∞—Ç—å—Å—è –∏ –±—ã—Ç—å —Ç–∞–∫–∏–º —É–ø—Ä—è–º—Ü–µ–º, –ª—É—á—à–µ –ø—Ä–æ–ø–∏—à–∏ —Å–≤–æ–∏ —Ü–µ–ª–∏ –≤ –±–ª–æ–∫–Ω–æ—Ç, —Ä–∞–∑–±–µ–π –Ω–∞ –º–∏–∫—Ä–æ-–∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π —Ç–≤–æ—Ä–∏—Ç—å —Å–≤–æ—é –Ω–æ–≤—É—é –ñ–ò–ó–ù–¨!!!",
        ],
        "99": [
            "–°–∞–º —Å–µ–±–µ –º–æ—Ç–∏–≤–∞—Ç–æ—Ä!!! –£–º–µ–µ—à—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å, —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–µ –Ω–∞ –∑–∞–¥–∞—á–∏, –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            "–ö–ª–∞—Å—Å–Ω–æ, –µ—Å–ª–∏ –±—É–¥–µ—à—å —Ü–µ–ª–∏ –¥–µ—Ä–∂–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –≥–æ–ª–æ–≤–µ, –Ω–æ –Ω–∞ –±—É–º–∞–≥–µ –∏–ª–∏ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ.",
            "–¢–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è, —á–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å.",
            "–ü–æ–¥ –æ–¥–Ω–æ –¥–µ–ª–æ –º–æ–∂–µ—à—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–æ–≤, –≤—Å—Ç—Ä–µ—á, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π, –≤–æ–æ–±—â–µ–º —Ç—ã —Ç–∞–∫–æ–π –∂–∏–≤—á–∏–∫!!!",
        ],
        "999": [
            "–°–∫–æ—Ä–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∫—Ä—É—á–µ, —á–µ–º —É –¥—Ä—É–≥–∏—Ö!!! –î–∞–∂–µ –≤ –±—ã—Ç—É —Ç—ã –±—ã—Å—Ç—Ä–æ –º–æ–∂–µ—à—å —Å–æ–æ–±—Ä–∞–∑–∏—Ç—å, –∫–∞–∫ —á—Ç–æ –ª—É—á—à–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å.",
            "–£–º–µ–µ—à—å –≤–∏–¥–µ—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, —Ç–≤–æ–π –∫—Ä—É–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –æ—Ç —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö –¥–æ —Å–∞–º—ã—Ö –æ–±—ã—á–Ω—ã—Ö.",
            "–õ–µ–≥–∫–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å—Å—è –ø–æ–¥ –º–µ–Ω—è—é—â–∏–µ—Å—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ä–µ—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π.",
            "–ú–æ–∂–µ—à—å '–ø–æ–π—Ç–∏ –ø–æ –≥–æ–ª–æ–≤–∞–º' –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å–≤–æ–µ–π —Ü–µ–ª–∏, –Ω–æ –Ω–µ —Å—Ç–æ–∏—Ç, –≤ –¥—É—à–µ —Ç—ã –±–µ–∑–∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –∏ –≤—ã–±–∏—Ä–∞–µ—à—å –¥—Ä—É–∂–±—É!!!",
            "–ò –¥–∞, –≤ –ø–æ–≥–æ–Ω–µ –∑–∞ —Ü–µ–ª—è–º–∏, –¥–∞–≤–∞–π —Å–µ–±–µ –≤—Ä–µ–º—è –Ω–∞ –±–µ–∑—Ü–µ–ª—å–Ω—ã–π –æ—Ç–¥—ã—Ö –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É.",
        ],
    },
}


@dp.message_handler(commands="start")
async def start(message: t.Union[types.Message, types.CallbackQuery], **kwargs) -> None:
    response = requests.get(url=SERVER_URL + f"/workers/{message.from_user.id}")
    if response.status_code != 200:
        return
    data = response.json()
    payment_details_response = requests.get(SERVER_URL + "/admin/payment/details/")
    payment_details = payment_details_response.json()

    if isinstance(message, types.Message):
        await message.answer(
            f"""
–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.full_name}

–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{data.get("amount")}‚ÇΩ</b>
–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('freezed_amount')}‚ÇΩ</b>

–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:

"""
            + "\n".join(
                [
                    f"<b>{payment_detail.get('name')}</b> : <code>{payment_detail.get('text')}</code>"
                    for payment_detail in payment_details
                ]
            ),
            reply_markup=await inline.worker_menu_keyboard(),
        )
    elif isinstance(message, types.CallbackQuery):
        message: types.CallbackQuery
        await message.message.edit_text(
            f"""
–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.full_name}

–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{data.get("amount")}‚ÇΩ</b>
–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('freezed_amount')}‚ÇΩ</b>
    """,
            reply_markup=await inline.worker_menu_keyboard(),
        )


@dp.callback_query_handler(lambda c: c.data == "proceed_receipt")
async def proceed_receipt(callback: types.CallbackQuery, state: FSMContext):
    await ReceiptState.receipt.set()

    message = await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É",
        reply_markup=await inline.worker_receipt_keyboard(),
    )
    await state.set_data({"last_message_id": message.message_id})


@dp.callback_query_handler(lambda c: c.data == "proceed_payout")
async def proceed_payout(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    await PayoutState.amount.set()

    response = requests.get(url=SERVER_URL + f"/workers/{callback.from_user.id}")
    if response.status_code != 200:
        return
    data = response.json()

    message = await callback.message.edit_text(
        f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('amount')}</b>\n–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('freezed_amount')}</b>\n–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{data.get('amount') - data.get('freezed_amount')}</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã: ",
        reply_markup=await inline.worker_payout_keyboard(),
    )
    await state.set_data({"last_message_id": message.message_id})


@dp.message_handler(state=PayoutState.amount)
async def payout_amount(
    message: t.Union[types.Message, types.CallbackQuery], state: FSMContext, **kwargs
):
    cdata = await state.get_data()
    if isinstance(message, types.Message):
        response = requests.get(url=SERVER_URL + f"/workers/{message.from_user.id}")
        if response.status_code != 200:
            return
        data = response.json()
        amount = int(data.get("amount"))
        await message.delete()
        try:
            input_amount = Decimal(message.text)
        except Exception as e:
            return await bot.edit_message_text(
                chat_id=message.from_user.id,
                text=f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('amount')}</b>\n–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('freezed_amount')}</b>\n–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{data.get('amount') - data.get('freezed_amount')}</b>\n\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–Ω–∞–∑–∞–¥'",
                message_id=cdata.get("last_message_id"),
                reply_markup=await inline.worker_payout_keyboard(),
            )

        if int(input_amount) > amount:
            return await bot.edit_message_text(
                chat_id=message.from_user.id,
                text=f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('amount')}</b>\n–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('freezed_amount')}</b>\n–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{data.get('amount') - data.get('freezed_amount')}</b>\n\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–Ω–∞–∑–∞–¥'",
                message_id=cdata.get("last_message_id"),
                reply_markup=await inline.worker_payout_keyboard(),
            )
        async with state.proxy() as data:
            data["amount"] = input_amount
            new_message = await bot.edit_message_text(
                chat_id=message.from_user.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ",
                reply_markup=await inline.chooose_payment_detail_keyboard(
                    user_id=message.from_user.id, amount=input_amount
                ),
                message_id=data["last_message_id"],
            )

            data["last_message_id"] = new_message.message_id
    elif isinstance(message, types.CallbackQuery):
        async with state.proxy() as data:
            new_message = await bot.edit_message_text(
                chat_id=message.from_user.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ",
                reply_markup=await inline.chooose_payment_detail_keyboard(
                    user_id=message.from_user.id, amount=data["amount"]
                ),
                message_id=data["last_message_id"],
            )

            data["last_message_id"] = new_message.message_id


@dp.callback_query_handler(
    lambda c: c.data.startswith("payment_detail"), state=PayoutState.amount
)
async def payment_detail(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    if kwargs.get("message"):
        cdata = await state.get_data()
        await UserPaymentDetail.name.set()
        new_message = await callback.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:\n\n<b>–ü—Ä–∏–º–µ—Ä: </b>–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥",
                    callback_data=f"payment_detail#back#{cdata.get('amount')}#-#-",
                )
            ),
        )
        return await state.set_data(
            {
                "name": cdata.get("name"),
                "amount": cdata.get("amount"),
                "last_message_id": new_message.message_id,
            }
        )
    splitted_data = callback.data.split("#")
    do = splitted_data[1]
    amount = splitted_data[2]
    where = splitted_data[3]
    pid = splitted_data[4]
    if do == "add":
        await UserPaymentDetail.name.set()
        new_message = await callback.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:\n\n<b>–ü—Ä–∏–º–µ—Ä: </b>–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥", callback_data=f"payment_detail#back#{amount}#-#-"
                )
            ),
        )
        await state.set_data(
            {"amount": amount, "last_message_id": new_message.message_id}
        )

    elif do == "back":
        wheres = {
            "-": proceed_payout,
            "name": payment_detail,
            "text": payment_detail_text,
        }
        await wheres[where](message=callback, callback=callback, state=state)

    elif do == "choose":
        await payment_detail_choose(
            callback=callback, state=state, amount=amount, pid=pid
        )


@dp.callback_query_handler(
    lambda c: c.data.startswith("payment_detail"), state=UserPaymentDetail.all_states
)
async def user_payment_detail(
    callback: types.CallbackQuery, state: FSMContext, **kwargs
):
    splitted_data = callback.data.split("#")
    do = splitted_data[1]
    amount = splitted_data[2]
    where = splitted_data[3]
    pid = splitted_data[4]
    wheres = {
        "-": proceed_payout,
        "name": payment_detail,
        "text": payment_detail_name,
        "confirm": payment_detail_confirm,
    }
    if do == "back":
        await wheres[where](
            message=callback, callback=callback, state=state, amount=amount
        )
    elif do == "confirm":
        await payment_detail_confirm(callback=callback, state=state)
    elif do == "choose":
        await payment_detail_choose(
            callback=callback, state=state, amount=amount, pid=pid
        )


async def payment_detail_confirm(callback: types.CallbackQuery, state: FSMContext):
    cdata = await state.get_data()
    name = cdata["name"]
    text = cdata["recv"]
    requests.post(
        SERVER_URL + "/users/payment/details/",
        headers={"accept": "application/json", "Content-Type": "application/json"},
        json={"name": name, "text": text, "user": callback.from_user.id},
    )

    await payout_amount(message=callback, state=state)


async def payment_detail_choose(
    callback: types.CallbackQuery, state: FSMContext, amount: str, pid: str
):
    cdata = await state.get_data()
    new_lead_response = requests.post(
        SERVER_URL
        + f"/worker/requests/?worker={callback.from_user.id}&amount={cdata.get('amount')}&type=withdrawal"
    )
    if new_lead_response.status_code != 200:
        return await bot.edit_message_text(
            chat_id=callback.from_user.id,
            text=f"<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...</b>\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∂–º–∏—Ç–µ '–Ω–∞–∑–∞–¥'",
            reply_markup=await inline.worker_payout_keyboard(all_sum=False),
            message_id=cdata.get("last_message_id"),
        )
    new_lead_data = new_lead_response.json()
    await state.finish()
    if new_lead_response.status_code != 200:
        return await bot.edit_message_text(
            chat_id=callback.from_user.id,
            text=f"<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...</b>\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∂–º–∏—Ç–µ '–Ω–∞–∑–∞–¥'",
            reply_markup=await inline.worker_payout_keyboard(all_sum=False),
            message_id=cdata.get("last_message_id"),
        )
    await bot.edit_message_text(
        chat_id=callback.from_user.id,
        text=f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∂–º–∏—Ç–µ '–Ω–∞–∑–∞–¥'",
        reply_markup=await inline.worker_payout_keyboard(all_sum=False),
        message_id=cdata.get("last_message_id"),
    )

    payment_detail = requests.get(
        SERVER_URL + f"/users/payment/details/?id={pid}"
    ).json()
    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n–†–∞–±–æ—Ç–Ω–∏–∫: @{new_lead_data.get('worker').get('username')}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n<b>{payment_detail.get('name')}</b> : {payment_detail.get('text')}\n–°—É–º–º–∞: {new_lead_data.get('amount')}‚ÇΩ",
        reply_markup=await inline.confirm_withdrawal_request_keyboard(
            new_lead_data.get("id")
        ),
    )


@dp.message_handler(state=UserPaymentDetail.name)
async def payment_detail_name(message: types.Message, state: FSMContext, **kwargs):
    async with state.proxy() as data:
        last_message_id = data["last_message_id"]
        if not kwargs.get("callback"):
            data["name"] = message.text
            await message.delete()

            new_message = await bot.edit_message_text(
                chat_id=message.from_user.id,
                text=f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {message.text}\n\n–£–∫–∞–∂–∏—Ç–µ —Å–∞–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n<b>–ü—Ä–∏–º–µ—Ä: </b>+79999999999 –∏–ª–∏ 0000000000000000",
                message_id=last_message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        text="–ù–∞–∑–∞–¥",
                        callback_data=f"payment_detail#back#{data['amount']}#name#-",
                    )
                ),
            )
            data["last_message_id"] = new_message.message_id
        else:
            new_message = await bot.edit_message_text(
                chat_id=message.from_user.id,
                text=f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {data['name']}\n\n–£–∫–∞–∂–∏—Ç–µ —Å–∞–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n<b>–ü—Ä–∏–º–µ—Ä: </b>+79999999999 –∏–ª–∏ 0000000000000000",
                message_id=last_message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        text="–ù–∞–∑–∞–¥",
                        callback_data=f"payment_detail#back#{data['amount']}#name#-",
                    )
                ),
            )
            data["last_message_id"] = new_message.message_id
        await UserPaymentDetail.text.set()


@dp.message_handler(state=UserPaymentDetail.text)
async def payment_detail_text(message: types.Message, state: FSMContext, **kwargs):
    async with state.proxy() as data:
        data["recv"] = message.text
        await message.delete()
        name = data["name"]
        last_message_id = data["last_message_id"]

        new_message = await bot.edit_message_text(
            chat_id=message.from_user.id,
            text=f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name}\n<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã: {message.text}</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã?",
            message_id=last_message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(
                    text="–î–∞",
                    callback_data=f"payment_detail#confirm#{data['amount']}#text#-",
                ),
                types.InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥",
                    callback_data=f"payment_detail#back#{data['amount']}#text#-",
                ),
            ),
        )
        data["last_message_id"] = new_message.message_id
        await UserPaymentDetail.text.set()


@dp.callback_query_handler(lambda c: c.data == "payout_all", state=PayoutState.amount)
async def payout_amount_all(callback: types.CallbackQuery, state: FSMContext):
    response = requests.get(url=SERVER_URL + f"/workers/{callback.from_user.id}")
    if response.status_code != 200:
        return
    data = response.json()
    amount = int(data.get("amount"))
    freezed_amount = int(data.get("freezed_amount"))
    if not amount > 0:
        await callback.message.edit_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('amount')}</b>\n–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('freezed_amount')}</b>\n–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{data.get('amount') - data.get('freezed_amount')}</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞",
            reply_markup=await inline.worker_payout_keyboard(),
        )
    elif not amount - freezed_amount > 0:
        await callback.message.edit_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('amount')}</b>\n–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{data.get('freezed_amount')}</b>\n–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{data.get('amount') - data.get('freezed_amount')}</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞",
            reply_markup=await inline.worker_payout_keyboard(),
        )
    else:
        async with state.proxy() as data:
            data["amount"] = amount - freezed_amount
            new_message = await bot.edit_message_text(
                chat_id=callback.from_user.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ",
                reply_markup=await inline.chooose_payment_detail_keyboard(
                    user_id=callback.from_user.id, amount=amount - freezed_amount
                ),
                message_id=data["last_message_id"],
            )

            data["last_message_id"] = new_message.message_id


@dp.callback_query_handler(lambda c: c.data == "payout_back")
async def receipt_back(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await start(callback)


@dp.callback_query_handler(
    lambda c: c.data == "payout_back", state=PayoutState.all_states
)
async def receipt_back(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await start(callback)


@dp.callback_query_handler(lambda c: c.data == "receipt_back")
async def receipt_back(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await start(callback)


@dp.callback_query_handler(
    lambda c: c.data == "receipt_back", state=ReceiptState.all_states
)
async def receipt_back(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await start(callback)


# @dp.message_handler(regexp=r"\d{2}.\d{2}.\d{4}")
# async def dob_message(message: types.Message):
#     date = re.match(r"\d{2}.\d{2}.\d{4}", message.text)
#     date = date.group()
#     headers = {
#         "accept": "application/json",
#     }

#     response = requests.get(
#         f"https://matrix.belofflab.com/matrix/{date}", headers=headers
#     )
#     data = response.json()

#     image_data = base64.b64decode(data.get("image"))

#     image_path = BASE_DIR / f"media/{uuid.uuid4()}.png"
#     with open(image_path, "wb") as f:
#         f.write(image_data)

#     caption = ""
#     matrix_data = data.get("matrix")
#     print(matrix_data)
#     for key, value in matrix_data.items():
#         try:
#             if value != "–ø—É—Å—Ç–æ":
#                 if len(value) > 2:
#                     value = value[:1] * 3
#             caption += (
#                 f"<b>{key.capitalize()}</b> : {random.choice(matrix[key][value])}\n\n"
#             )
#         except KeyError:
#             continue

#     await message.answer_photo(
#         photo=types.InputFile(image_path), caption=caption[:1024]
#     )


@dp.message_handler(
    content_types=[types.ContentType.DOCUMENT, types.ContentType.PHOTO],
    state=ReceiptState.receipt,
)
async def control_amount(message: types.Message, state: FSMContext) -> None:
    try:
        amount = Decimal(message.caption)
    except Exception as e:
        return
    document = message.document
    photo = message.photo
    last_message_id = await state.get_data("last_message_id")
    photo_to_delete = None
    if isinstance(document, types.Document):
        file_extension = os.path.splitext(document.file_name)[1]
        unique_filename = str(uuid.uuid4()) + file_extension
        file_info = await bot.get_file(document.file_id)
        file_path = file_info.file_path
        output_file = BASE_DIR / f"media/{unique_filename}"
        await bot.download_file(file_path, output_file)
        photo_to_delete = output_file
    elif isinstance(photo, list):
        file_info = await bot.get_file(photo[-1].file_id)
        file_extension = file_info.file_path.split(".")[-1]
        unique_filename = str(uuid.uuid4()) + "." + file_extension
        output_file = BASE_DIR / f"media/{unique_filename}"
        await photo[-1].download(destination_file=output_file)
        photo_to_delete = output_file
    params = {"worker": message.from_user.id, "amount": str(amount), "type": "deposit"}
    new_lead_status = False
    new_lead_data = {}
    with open(output_file, "rb") as file:
        new_lead_response = requests.post(
            SERVER_URL + f"/worker/requests/", params=params, files={"receipt": file}
        )
        if new_lead_response.status_code == 200:
            new_lead_status = True
            new_lead_data = new_lead_response.json()
        else:
            return await bot.edit_message_text(
            chat_id=message.from_user.id,
            text=f"<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...</b>\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∂–º–∏—Ç–µ '–Ω–∞–∑–∞–¥'",
            reply_markup=await inline.worker_receipt_keyboard(),
            message_id=last_message_id.get("last_message_id"),
        )

    await bot.send_message(875044476, str(new_lead_data))
    
    await message.delete()
    SUCCESS_MESSAGE = (
        "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–µ–∫! \n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∂–º–∏—Ç–µ <b>'–ù–∞–∑–∞–¥'</b>"
    )
    await state.finish()
    await bot.edit_message_text(
        chat_id=message.from_user.id,
        text=SUCCESS_MESSAGE,
        reply_markup=await inline.worker_receipt_keyboard(),
        message_id=last_message_id.get("last_message_id"),
    )

    print(new_lead_data['worker']['username'])
    await bot.send_photo(
        chat_id=CHANNEL_ID,
        caption=f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n–†–∞–±–æ—Ç–Ω–∏–∫: @123\n–°—É–º–º–∞: {new_lead_data.get('amount')}‚ÇΩ",
        photo=types.InputFile(output_file),
        reply_markup=await inline.confirm_deposit_request_keyboard(
            new_lead_data.get("id")
        ),
    )

    os.remove(photo_to_delete)


async def list_workers_requests(callback: types.CallbackQuery, page: str, **kwargs):
    await callback.message.edit_text(
        "–ß–µ–∫–∏ (–û—Ç —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö):\n\nüìà- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\nüìâ- –í—ã–≤–æ–¥",
        reply_markup=await inline.workers_requests_keyboard(
            current_page=page, worker=callback.from_user.id
        ),
    )


async def show_workers_request(
    callback: types.CallbackQuery, request: str, page: str, **kwargs
):
    response = requests.get(SERVER_URL + f"/worker/requests/{request}")
    data = response.json()
    await callback.message.edit_text(
        text=f"""
–†–∞–±–æ—Ç–Ω–∏–∫: @{data['worker']['username']}

–ß–µ–∫ –Ω–∞ —Å—É–º–º—É: {data.get("amount")}‚ÇΩ

–°—Ç–∞—Ç—É—Å: <b>{'‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' if data.get("is_success") else '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'}</b>

–¢–∏–ø: <b>{"–î–µ–ø–æ–∑–∏—Ç" if data.get("type") == "deposit" else "–í—ã–≤–æ–¥"}</b>

""",
        reply_markup=await inline.show_worker_request_keyboard(
            page=page, request=request
        ),
    )


@dp.callback_query_handler(inline.uworkers_requests_cd.filter())
async def workers_requests_navigate(
    callback: types.CallbackQuery, callback_data: dict
) -> None:
    level = callback_data.get("level")
    request = callback_data.get("request")
    page = callback_data.get("page")

    levels = {
        "0": start,
        "1": list_workers_requests,
        "2": show_workers_request,
    }

    current_level_function = levels[level]

    await current_level_function(callback, request=request, page=page)
