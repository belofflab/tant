import requests
from typing import Union

from aiogram import types
import os
import uuid
from data.config import VIKTORIA, SERVER_URL, CHANNEL_ID, BASE_DIR
from math import ceil
from database import models
from keyboards.user import inline
from aiogram.dispatcher import FSMContext
from filters.is_connected import IsConnected
from states.matrix import Matrix
from states.matrix_buy import MatrixBuy
from io import BytesIO
from loader import dp, bot

MENU_CAPTION = """
<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!</b>üòå
–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è. –Ø –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥.
–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –∏ –æ–±—É—á–∞—é. 

üí´–ù–∞ –º–æ–µ–º —Å—á–µ—Ç—É –±–æ–ª–µ–µ 1000 —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.

–°¬†–ø–æ–º–æ—â—å—é —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π —è –º–æ–≥—É –ø—Ä–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏¬†–ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è¬†–í–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏¬†–ø—Ä–∞–∫—Ç–∏–∫—É, –Ω–∞—Ü–µ–ª–µ–Ω–Ω—É—é –Ω–∞¬†–≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –ø–æ¬†–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ –∂–∏–∑–Ω–∏.
–ò¬†—è, –∫–∞–∫¬†–Ω–∏–∫—Ç–æ –∑–Ω–∞—é, —á—Ç–æ¬†—É –∫–∞–∂–¥–æ–≥–æ –∏–∑¬†–Ω–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –∫¬†–ª—É—á—à–µ–º—É, –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–æ–π —Å–∏–ª–µ, —á—Ç–æ¬†—Å–∫—Ä—ã—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å!¬†
‚Äå–Ø –ø–æ–º–æ–≥–∞—é —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –í–∞—à–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏, —Ä–∞—Å–∫—Ä—ã—Ç—å –í–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏¬†—É–ª—É—á—à–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.¬†
‚Äå
‚Äå–£–º–µ—é —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥/–º–µ—Å—è—Ü. –†–∞—Å–ø–æ–ª–∞–≥–∞—é –Ω–æ–≤–µ–π—à–∏–º–∏ –º–µ—Ç–æ–¥–∏–∫–∞–º–∏ –°—Ç–∞–≤–æ–≤, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞¬†—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
"""


calendar_haircut = {
    "–ò—é–Ω—å": """
–°–∞–º—ã–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ –≤–æ–ª–æ—Å –≤ –∏—é–Ω–µ ‚úÇÔ∏è 

‚úÖ - –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ - 24, 25, 27  –∏—é–Ω—è

‚ùå - –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ - 26 –∏—é–Ω—è 

–û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
""",
    "–ò—é–ª—å": """
–°–∞–º—ã–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ –≤–æ–ª–æ—Å –≤ –∏—é–ª–µ ‚úÇÔ∏è 

‚úÖ - –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ - 12, 18, 19, 20, 21, 22, 23, 24, 30 

‚ùå - –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ - 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 25 

–û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
""",
    "–ê–≤–≥—É—Å—Ç": """
–°–∞–º—ã–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ –≤–æ–ª–æ—Å –≤ –ê–≤–≥—É—Å—Ç–µ 2023 –≥. ‚úÇÔ∏è 

‚úÖ - –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ - 7, 8, 14, 15, 17, 18, 19, 20, 21, 27, 28. 

‚ùå - –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ - 1, 2, 3, 4, 5, 6, 12, 13, 24, 25, 31 

–û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
""",
    "–°–µ–Ω—Ç—è–±—Ä—å": """
–°–∞–º—ã–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ –≤–æ–ª–æ—Å –≤ –°–µ–Ω—Ç—è–±—Ä–µ 2023–≥. ‚úÇÔ∏è 

‚úÖ - –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ - 4, 5, 11, 12, 13, 14, 16, 17, 24, 

‚ùå - –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ - 1, 2, 3, 8, 9, 10, 27, 28, 29, 30. 

–û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
""",
    "–û–∫—Ç—è–±—Ä—å": """
–°–∞–º—ã–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ –≤–æ–ª–æ—Å –≤ –û–∫—Ç—è–±—Ä–µ 2023 –≥. ‚úÇÔ∏è 

‚úÖ - –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ - 1, 2, 8, 9, 10, 11, 12, 20, 21, 28. 

‚ùå - –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ - 6, 7, 13, 14, 23, 24, 25, 26, 27. 

–û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
""",
    "–ù–æ—è–±—Ä—å": """
–°–∞–º—ã–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ –≤–æ–ª–æ—Å –≤ –ù–æ—è–±—Ä–µ 2023 –≥. ‚úÇÔ∏è 

‚úÖ - –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ - 4, 5, 6, 7, 8, 16, 17, 25, 26, 27

‚ùå - –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ - 2, 3, 12, 13, 21, 22, 23, 24, 28, 29, 30

–û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
""",
    "–î–µ–∫–∞–±—Ä—å": """
–°–∞–º—ã–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ –≤–æ–ª–æ—Å –≤ –î–µ–∫–∞–±—Ä–µ 2023 –≥. ‚úÇÔ∏è 

‚úÖ - –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏ - 2, 3, 4, 5, 6, 14, 15, 22, 23, 24, 25, 29, 30, 31

‚ùå - –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ - 1, 9, 10, 11, 12, 13, 18, 19, 20, 21, 27, 28. 

–û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
""",
}


relationships = {
    "0": """
–í –≤–∞—à–µ–π –ø–∞—Ä–µ  –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–æ–∫ –∏ –æ–±–Ω—É–ª–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –∂–∏–∑–Ω–∏.
–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —É –≤–∞—à–µ–π –ø–∞—Ä—ã –Ω–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ.

–≠—Ç–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –≤–º–µ—Å—Ç–µ, –ø—Ä–æ—Å—Ç–æ –º–Ω–æ–≥–∏–µ –Ω–µ –≤—ã–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π, –Ω–æ –≤—Å–µ –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö, –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ—Ç—Ä—É–¥–∏—Ç—å—Å—è ü§∑üèº‚Äç‚ôÄÔ∏è

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "1": """
ü§î –û–¥–Ω–∞–∂–¥—ã –≤–∞–º —É–∂–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–º, –∏ –≤–∞—à–∞ –ª—é–±–æ–≤—å –±—ã–ª–∞ —Å–∏–ª—å–Ω–æ–π. –û–¥–Ω–∞–∫–æ –≤ —ç—Ç–æ–π –∂–∏–∑–Ω–∏ —Å–≤—è–∑—å –º–µ–∂–¥—É –≤–∞–º–∏ –≤—Ä—è–¥ –ª–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ö–æ—Ä–æ—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. 

‚òùüèª–ù–æ, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –¥–æ–ø.–ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏, –∞ —Ç–∞–∫ –≤—Å–µ —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö.

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "2": """
ü§î –û–¥–Ω–∞–∂–¥—ã –≤–∞–º —É–∂–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–º, –∏ –≤–∞—à–∞ –ª—é–±–æ–≤—å –±—ã–ª–∞ —Å–∏–ª—å–Ω–æ–π. –û–¥–Ω–∞–∫–æ –≤ —ç—Ç–æ–π –∂–∏–∑–Ω–∏ —Å–≤—è–∑—å –º–µ–∂–¥—É –≤–∞–º–∏ –≤—Ä—è–¥ –ª–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ö–æ—Ä–æ—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. 

‚òùüèª–ù–æ, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –¥–æ–ø.–ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏, –∞ —Ç–∞–∫ –≤—Å–µ —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö.

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "3": """
üò≥ –í —Ç–∞–∫–æ–º —Å–æ—é–∑–µ –≥–ª–∞–≤–Ω–æ–π —è–≤–ª—è–µ—Ç—Å—è –∂–µ–Ω—â–∏–Ω–∞. –ï—Å–ª–∏ –º—É–∂—á–∏–Ω–∞ —Å–º–æ–∂–µ—Ç —ç—Ç–æ –ø—Ä–∏–Ω—è—Ç—å, —Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–æ–¥–ª–∏—Ç—å—Å—è –¥–æ–ª–≥–æ. 

–ù–æ, –µ—â–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –¥–æ–ø.–ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—Å–µ –Ω–µ —Ç–∞–∫ –≥–ª–∞–¥–∫–æ.

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "4": """
–°—É–ø–µ—Ä üôåüèº 
–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ. –ö–∞—Ä–º–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –≤ —Ç–∞–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –µ—Å—Ç—å, –Ω–æ –æ–Ω–∞ –æ—á–µ–Ω—å —Å–ª–∞–±–∞—è. –ü–æ—ç—Ç–æ–º—É –æ—Å–æ–±–æ –Ω–∏—á–µ–≥–æ –Ω–µ —É–≥—Ä–æ–∂–∞–µ—Ç.

–ö–∞–∫ –º–∏–Ω–∏–º—É–º –ø–æ —ç—Ç–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é –ø—Ä–æ—Ä–∞–±–æ—Ç–æ–∫ –Ω–µ—Ç üëçüèº

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "5": """
–î–∞ —É–∂ üòÅ
–°–∫—É—á–Ω–æ —Ç–æ—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç. –°–∏–ª—å–Ω–∞—è –¥—É—Ö–æ–≤–Ω–∞—è –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–π –ª—é–¥–µ–π —Ç—è–Ω–µ—Ç –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É. üß≤ 
–¢–∞–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–æ—Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ.

–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–≤—è–∑—å. 

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "6": """
üò≥üò≥üò≥ –û–ø–∞—Å–Ω–æ–µ —á–∏—Å–ª–æ. –û–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ –ø—Ä–æ—à–ª–æ–º –≤—ã –±—ã–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏, –Ω–æ –∫—Ç–æ-—Ç–æ –ø–æ–≥–∏–± —Ä–∞–Ω–æ, —á—Ç–æ –∑–∞—Å—Ç–∞–≤–∏–ª–æ –¥—Ä—É–≥–æ–≥–æ —Å—Ç—Ä–∞–¥–∞—Ç—å. –û—Ç–Ω–æ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º–∏ –∏ –º—É—á–∏—Ç–µ–ª—å–Ω—ã–º–∏.

–ù–æ, –Ω–µ –ø—É–≥–∞–π—Ç–µ—Å—å, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –≤–ø–æ–ª–Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç, –Ω–æ –Ω–µ –±–µ–∑ –ø—Ä–æ—Ä–∞–±–æ—Ç–æ–∫ ü§∑üèº‚Äç‚ôÄÔ∏è

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "7": """
–û—Ç–ª–∏—á–Ω–æ. üëçüèº 
–£–¥–∞—á–Ω—ã–π —Å–æ—é–∑ üòçüòçüòç

–ß–∏—Å–ª–æ —Å–µ–º—å —Å—É–ª–∏—Ç –¥–æ–ª–≥—É—é –∏ —Å—á–∞—Å—Ç–ª–∏–≤—É—é —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∂–∏–∑–Ω—å. 
–ö–∞–∫ –º–∏–Ω–∏–º—É–º –ø–æ —ç—Ç–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é —É –≤–∞—Å –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ üôåüèº

–í–ø–æ–ª–Ω–µ –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è. 

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "8": """
–£—É—É—É...–í –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ —ç—Ç–æ —á–∏—Å–ª–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏. ‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è

–û–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—ã –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –≤ –ø—Ä–æ—à–ª–æ–π –∂–∏–∑–Ω–∏ üò≥ –∏ –µ—â–µ –Ω–µ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ—Å—å –≤ –±—É–¥—É—â–µ–º.

–ü—Ä–æ—Ä–∞–±–æ—Ç–æ—á–∫–∏ –µ—Å—Ç—å, –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å. –ü–æ–º–Ω–∏–º –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, –≤—Å–µ –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–∫ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ ü§ó

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
    "9": """
–ü–æ–∑–¥—Ä–∞–≤–ª—è—é.üôåüèºüôåüèºüôåüèº

–ö–∞—Ä–º–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ—ç—Ç–æ–º—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—Å —Å–∞–º–∏—Ö üòç

–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ä–∞–±–æ—Ç–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é –Ω–µ—Ç üôåüèº

–ù–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è
""",
}


async def get_or_create_user(user_id: int, username: str) -> models.User:
    user = await models.User.query.where(models.User.idx == user_id).gino.first()
    if user is not None:
        await models.User.update.values(is_active=True).where(
                models.User.idx == user.idx
            ).gino.status()
        return user
    return await models.User.create(
        idx=user_id, username=username if username is not None else "no username"
    )


async def proceed_signin(message):
    await get_or_create_user(
                user_id=message.from_user.id, username=message.from_user.username
            )
    requests.post(
        url=SERVER_URL + f"/users/?worker_name=viktoria_numer",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "id": message.from_user.id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "worker": 9999,
        },
    )

@dp.message_handler(commands="start")
async def start(message: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    from . import askeza, numercourse, forecastcourse
    if isinstance(message, types.Message):
        account = message.get_args()
        try:
            services = {
                "fincode": "6Ô∏è‚É£ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–¥",
                "moncharm": "5Ô∏è‚É£ –°—Ç–∞–≤ –¥–µ–Ω–µ–∂–Ω—ã–π –∞–º—É–ª–µ—Ç",
                "energy": "9Ô∏è‚É£ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–≤—è–∑–∫–∞",
                "monform": "üîü –î–µ–Ω–µ–∂–Ω–∞—è –Ω–µ–π—Ä–æ—Ñ–æ—Ä–º—É–ª–∞",
                "helsaf": "7Ô∏è‚É£ –°—Ç–∞–≤ ¬´–ü–æ–º–æ—â—å¬ª",
                "onetwomon": "3Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 1-2 –º–µ—Å—è—Ü–∞",
                "fullprog": "4Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥"
            }
            # service_idx = int(account)
            is_service = await models.Service.query.where(models.Service.name == services[account]).gino.first()
            if is_service is not None:
                await proceed_signin(message=message)
                return await show_service(callback=message, service_type="1", service=is_service.idx, worker="viktoria_numer")
        except (ValueError, KeyError):
            pass
        if account == "askeza":
            await proceed_signin(message=message)
            return await askeza.list_buttons(callback=message, worker="viktoria_numer")
        if account == "services":
            await proceed_signin(message=message)
            return await list_services(callback=message, service_type="1", worker="viktoria_numer")
        if account == "timeoclock":
            from .timeoclock import list_buttons
            await proceed_signin(message=message)
            return await list_buttons(callback=message, worker="viktoria_numer")
        if account == "taro":
            from .training import list_courses
            await proceed_signin(message=message)
            return await list_courses(callback=message, worker="viktoria_numer")
        if account == "course_numerology":
            await proceed_signin(message=message)
            return await numercourse.list_buttons(callback=message, worker="viktoria_numer")
        if account == "course_prognoz":
            await proceed_signin(message=message)
            return await forecastcourse.list_buttons(callback=message, worker="viktoria_numer")
        if account == "free":
            await proceed_signin(message=message)
            return await free(callback=message, worker="viktoria_numer")
        if account == "2024":
            await proceed_signin(message=message)
            return await s2024(callback=message, worker="viktoria_numer")
        if account not in ["viktoria_numer", "numerolog_viktoriia"]:
            account = "viktoria_numer"
        await get_or_create_user(
            user_id=message.from_user.id, username=message.from_user.username
        )
        requests.post(
            url=SERVER_URL + f"/users/?worker_name={account}",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": "FROM",
                "last_name": "BOT",
                "worker": 9999,
            },
        )
        await message.answer_photo(
            photo=types.InputFile(VIKTORIA),
            caption=MENU_CAPTION,
            reply_markup=await inline.menu_keyboard(worker=account),
        )
    elif isinstance(message, types.CallbackQuery):
        message: types.CallbackQuery
        await message.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.InputFile(VIKTORIA), caption=MENU_CAPTION
            ),
            reply_markup=await inline.menu_keyboard(worker=kwargs.get("worker")),
        )

@dp.callback_query_handler(lambda c: c.data.startswith("s2024"))
async def s2024(callback: Union[types.CallbackQuery, types.Message], worker: str = "viktoria_numer") -> None:
    if isinstance(callback, types.CallbackQuery):
        worker = callback.data.split("#")[-1]
        await callback.message.edit_caption(
        caption=f"""

–í—ã —É–∑–Ω–∞–µ—Ç–µ –∫–∞–∫–∞—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —É –≤–∞—Å –Ω–∞ 2024 –≥–æ–¥. 
–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ üëáüèª

@{worker}

¬´–ü—Ä–æ–≥–Ω–æ–∑ 2024¬ª –∏ —è —Å–∫–∏–Ω—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

""",
        reply_markup=await inline.free_markup(worker=worker),
    )
    elif isinstance(callback, types.Message):
        await callback.answer_photo(
            photo=types.InputFile(VIKTORIA),
        caption=f"""

–í—ã —É–∑–Ω–∞–µ—Ç–µ –∫–∞–∫–∞—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —É –≤–∞—Å –Ω–∞ 2024 –≥–æ–¥. 
–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ üëáüèª

@{worker}

¬´–ü—Ä–æ–≥–Ω–æ–∑ 2024¬ª –∏ —è —Å–∫–∏–Ω—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

""",
        reply_markup=await inline.free_markup(worker=worker),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("order_matrix"))
async def order_matrix(callback: types.CallbackQuery, state: FSMContext):
    worker = callback.data.split("#")[-1]
    new_message = await callback.message.edit_caption(
        "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2000",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="order_matrix_back")
        ),
    )
    await Matrix.dob.set()
    await state.set_data({"last_message_id": new_message.message_id, "worker": worker})


@dp.callback_query_handler(lambda c: c.data == "order_matrix_back", state=Matrix.dob)
async def order_matrix_back(callback: types.CallbackQuery, state: FSMContext):
    cdata = await state.get_data()
    worker = cdata.get("worker")
    await state.finish()
    await start(message=callback, worker=worker)


@dp.callback_query_handler(lambda c: c.data.startswith("menu_order_matrix"))
async def order_matrix_menu(callback: types.CallbackQuery):
    worker = callback.data.split("#")[-1]
    await start(message=callback, worker=worker)


@dp.callback_query_handler(
    lambda c: c.data.startswith("menu_order_matrix"), state=MatrixBuy.receipt
)
async def order_matrix_cancel(callback: types.CallbackQuery, state: FSMContext):
    worker = callback.data.split("#")[-1]
    await state.finish()
    await start(message=callback, worker=worker)


@dp.message_handler(regexp=r"\d{2}.\d{2}.\d{4}", state=Matrix.dob)
async def order_matrix_dob(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        last_message_id = data["last_message_id"]
        dob = message.text
        await message.delete()
        new_message = await bot.edit_message_caption(
            chat_id=message.from_user.id,
            caption=f"–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob} —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n\n<b>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å...</b>",
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton(
                    text="–¥–∞", callback_data=f"order_matrix_confirm#{dob}"
                ),
                types.InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞", callback_data="order_matrix_back"
                ),
            ),
            message_id=last_message_id,
        )
        data["last_message_id"] = new_message.message_id


@dp.callback_query_handler(
    lambda c: c.data.startswith("order_matrix_confirm"), state=Matrix.dob
)
async def order_matrix_confirm(callback: types.CallbackQuery, state: FSMContext):
    dob = callback.data.split("#")[-1]
    cdata = await state.get_data("worker")
    worker = cdata.get("worker")
    await state.finish()
    await callback.message.edit_caption(
        caption=callback.message.caption + "\n\n–°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...."
    )
    response = requests.post(
        SERVER_URL + "/matrix/requests/",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "user": callback.from_user.id,
            "dob": dob,
        },
    )
    data = response.json()
    image = requests.get(SERVER_URL.replace("/api/v1", "/") + data.get("image"))

    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            types.InputFile(BytesIO(image.content)),
            caption=data.get("result")[:256]
            + "..."
            + "\n\n<b>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –æ–ø–ª–∞—Ç–∏—Ç–µ –æ—Ç—á—ë—Ç</b>",
        ),
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏—Ç—å",
                callback_data=f"buy_matrix#{data.get('id')}#{worker}",
            ),
            types.InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞", callback_data=f"menu_order_matrix#{worker}"
            ),
        ),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("deposit_request_confirm"))
async def deposit_request_confirm(callback: types.CallbackQuery):
    mrequest_id = int(callback.data.split("#")[1])
    wrequest_id = int(callback.data.split("#")[2])
    last_message_id = int(callback.data.split("#")[3])
    user_id = int(callback.data.split("#")[4])
    worker = callback.data.split("#")[5]

    response = requests.patch(
        SERVER_URL + "/worker/requests/",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "id": wrequest_id,
            "is_success": True,
            "comment": "string",
        },
    )
    response_data = response.json()
    await callback.message.edit_caption(
        caption=f"{callback.message.caption}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞"
    )
    response = requests.get(SERVER_URL + f"/matrix/requests/{mrequest_id}")
    matrix = response.json()
    result = matrix.get("result")
    page_size = 1024
    max_pages = ceil(len(result) / page_size)
    await bot.edit_message_caption(
        chat_id=user_id,
        caption=result[0:1024],
        reply_markup=await inline.show_matrix(
            worker=worker,
            matrix_page=1,
            request_id=matrix.get("id"),
            page=1,
            max_pages=max_pages,
        ),
        message_id=last_message_id,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("deposit_request_decline"))
async def deposit_request_decline(callback: types.CallbackQuery):
    mrequest_id = int(callback.data.split("#")[1])
    wrequest_id = int(callback.data.split("#")[2])
    last_message_id = int(callback.data.split("#")[3])
    user_id = int(callback.data.split("#")[4])
    worker = callback.data.split("#")[5]

    response = requests.patch(
        SERVER_URL + "/worker/requests/",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "id": wrequest_id,
            "is_success": False,
            "comment": "string",
        },
    )
    response_data = response.json()
    await callback.message.edit_caption(
        caption=f"{callback.message.caption}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    )
    await bot.edit_message_caption(
        chat_id=user_id,
        caption="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –º–∞—Ç—Ä–∏—Ü—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥", callback_data=f"menu_order_matrix#{worker}"
            )
        ),
        message_id=last_message_id,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("buy_matrix"))
async def buy_matrix(callback: types.CallbackQuery):
    mid = callback.data.split("#")[1]
    worker = callback.data.split("#")[2]
    await callback.message.edit_caption(
        caption="""
–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: <code>4276673835364343</code>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> –°–µ—Ä–≥–µ–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á –ö.
<b>–ë–∞–Ω–∫:</b> –°–±–µ—Ä–±–∞–Ω–∫.

–°—É–º–º–∞: <code>500</code>‚ÇΩ

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b> –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
""",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_buy_matrix#{mid}#{worker}"
            ),
            types.InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞", callback_data=f"menu_order_matrix#{worker}"
            ),
        ),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("confirm_buy_matrix"))
async def buy_matrix_confirm(callback: types.CallbackQuery, state: FSMContext):
    mid = callback.data.split("#")[1]
    worker = callback.data.split("#")[2]
    new_message = await callback.message.edit_caption(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞", callback_data=f"menu_order_matrix#{worker}"
            )
        ),
    )
    await MatrixBuy.receipt.set()
    await state.set_data(
        {"mid": mid, "last_message_id": new_message.message_id, "worker": worker}
    )


@dp.message_handler(
    content_types=[types.ContentType.DOCUMENT, types.ContentType.PHOTO],
    state=MatrixBuy.receipt,
)
async def control_amount(message: types.Message, state: FSMContext) -> None:
    amount = 500
    document = message.document
    photo = message.photo
    last_message_id = await state.get_data("last_message_id")
    photo_to_delete = None
    if isinstance(document, types.Document):
        file_extension = os.path.splitext(document.file_name)[1]
        unique_filename = str(uuid.uuid4()) + file_extension
        file_info = await bot.get_file(document.file_id)
        file_path = file_info.file_path
        output_file = BASE_DIR / f"media/{unique_filename}"
        await bot.download_file(file_path, output_file)
        photo_to_delete = output_file
    elif isinstance(photo, list):
        file_info = await bot.get_file(photo[-1].file_id)
        file_extension = file_info.file_path.split(".")[-1]
        unique_filename = str(uuid.uuid4()) + "." + file_extension
        output_file = BASE_DIR / f"media/{unique_filename}"
        await photo[-1].download(destination_file=output_file)
        photo_to_delete = output_file
    params = {"worker": 5625107813, "amount": str(amount), "type": "deposit"}
    new_lead_status = False
    new_lead_data = {}

    with open(output_file, "rb") as file:
        new_lead_response = requests.post(
            SERVER_URL + f"/worker/requests/", params=params, files={"receipt": file}
        )
        if new_lead_response.status_code == 200:
            new_lead_status = True
            new_lead_data = new_lead_response.json()

    requests.patch(
        SERVER_URL + f"/matrix/requests/{last_message_id.get('mid')}/",
        params={
            "worker_request": new_lead_data.get("id"),
        },
        headers={
            "accept": "application/json",
        },
    )
    await message.delete()
    SUCCESS_MESSAGE = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–µ–∫! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã..."
    await state.finish()
    new_message = await bot.edit_message_caption(
        chat_id=message.from_user.id,
        caption=SUCCESS_MESSAGE,
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data=f"menu_order_matrix#{last_message_id.get('worker')}",
            )
        ),
        message_id=last_message_id.get("last_message_id"),
    )

    await bot.send_photo(
        chat_id=CHANNEL_ID,
        caption=f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –º–∞—Ç—Ä–∏—Ü—ã</b>\n\n–†–∞–±–æ—Ç–Ω–∏–∫: @{new_lead_data.get('worker').get('username')}\n–°—É–º–º–∞: {new_lead_data.get('amount')}‚ÇΩ",
        photo=types.InputFile(output_file),
        reply_markup=await inline.confirm_deposit_request_keyboard(
            last_message_id.get("mid"),
            new_lead_data.get("id"),
            new_message.message_id,
            message.from_user.id,
            worker=last_message_id.get("worker"),
        ),
    )

    os.remove(photo_to_delete)


@dp.callback_query_handler(lambda c: c.data.startswith("bonus"))
async def bonus_list(callback: types.CallbackQuery, **kwargs):
    worker = callback.data.split("#")[-1]
    kworker = kwargs.get("worker")
    if kworker is not None:
        worker = kworker
    bonuses = [
        {
            "text": "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç—Ä–∏–∂–µ–∫",
            "callback_data": inline.make_bonus_cd(level=1, worker=worker),
        },
        {
            "text": "–ö–∞—Ä–º–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
            "callback_data": inline.make_relationships_cd(level=1, worker=worker),
        },
    ]
    markup = types.InlineKeyboardMarkup(row_width=1)
    for bonus in bonuses:
        markup.add(types.InlineKeyboardButton(**bonus))
    markup.add(
        types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data=inline.make_service_cd(level=0)
        )
    )
    await callback.message.edit_caption("–ë–æ–Ω—É—Å—ãüéÅ", reply_markup=markup)


async def list_calendar(callback: types.CallbackQuery, worker: str, **kwargs):
    markup = types.InlineKeyboardMarkup(row_width=1)

    for date in calendar_haircut:
        markup.row(
            types.InlineKeyboardButton(
                text=date,
                callback_data=inline.make_bonus_cd(level=2, worker=worker, month=date),
            )
        )

    markup.add(
        types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data=inline.make_bonus_cd(level=0, worker=worker)
        )
    )

    await callback.message.edit_caption("üìÖ–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç—Ä–∏–∂–µ–∫", reply_markup=markup)


async def list_relationships(callback: types.CallbackQuery, worker: str, **kwargs):
    markup = types.InlineKeyboardMarkup(row_width=3)

    for idx, key in enumerate(relationships):
        if idx == 1:
            markup.row(
                types.InlineKeyboardButton(
                    text=key,
                    callback_data=inline.make_relationships_cd(
                        level=2, worker=worker, key=key
                    ),
                )
            )
        else:
            markup.insert(
                types.InlineKeyboardButton(
                    text=key,
                    callback_data=inline.make_relationships_cd(
                        level=2, worker=worker, key=key
                    ),
                )
            )
    markup.add(
        types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=inline.make_relationships_cd(level=0, worker=worker),
        )
    )

    await callback.message.edit_caption(
        """
<b>–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –ª–∏ —É –≤–∞—Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è?,</b> ü§î 

–≠—Ç–æ—Ç —Ä–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –æ—á–µ–Ω—å –∫—Å—Ç–∞—Ç–∏, –æ–Ω –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å–≤—è–∑–∏, –∏, –∫–∞–∫–∞—è –æ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è. 

<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç?</b>

–í–æ–∑—å–º–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–ª–æ–∂–∏—Ç–µ –≤—Å–µ —á–∏—Å–ª–∞. 
–ü—Ä–∏–º–µ—Ä ‚¨áÔ∏è

05.01.1995 –∏ 23.01.1993
–°–∫–ª–∞–¥—ã–≤–∞–µ–º –≤–∞—à–∏ –¥–∞—Ç—ã: 

5+1+1+9+9+5+2+3+1+1+9+9+3=58

–ü–æ–ª—É—á–∏–ª–æ—Å—å —á–∏—Å–ª–æ 58. –í—ã –±–µ—Ä–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É —Ç.–µ –≤–∞—à–µ —á–∏—Å–ª–æ 8 –∏–º–µ–Ω–Ω–æ –æ–Ω–æ –∏ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–æ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π –≤–∞—à–µ–π –ø–∞—Ä—ã. 

–°–º–æ—Ç—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —á–∏—Å–ª–∞. ‚¨áÔ∏è
""",
        reply_markup=markup,
    )


async def show_relationship(callback: types.CallbackQuery, key: str, worker: str):
    await callback.message.edit_caption(
        relationships[key],
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–±–æ—Ä",
                url="https://api.whatsapp.com/send/?phone=79292084866&text=–ü—Ä–∏–≤–µ—Ç!+–•–æ—á—É+—Ä–∞–∑–±–æ—Ä+–ø–æ+—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏+–∑–∞+2000‚ÇΩ&type=phone_number&app_absent=0?",
            ),
            types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data=inline.make_relationships_cd(
                    level=1, worker=worker, key=key
                ),
            ),
        ),
    )


async def show_calendar(callback: types.CallbackQuery, month: str, worker: str):
    await callback.message.edit_caption(
        calendar_haircut[month],
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data=inline.make_bonus_cd(level=1, worker=worker, month=month),
            )
        ),
    )


async def list_service_types(callback: types.CallbackQuery, worker, **kwargs) -> None:
    markup = await inline.service_types_keyboard(worker=worker)
    text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üëá"
    await callback.message.edit_caption(caption=text, reply_markup=markup)


async def list_services(
    callback: types.CallbackQuery, service_type: str, worker: str, **kwargs
) -> None:
    markup = await inline.services_keyboard(service_type, worker)
    text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üëá"
    if isinstance(callback, types.CallbackQuery):
        await callback.message.edit_caption(caption=text, reply_markup=markup)
    elif isinstance(callback, types.Message):
        await callback.answer_photo(photo=types.InputFile(VIKTORIA), caption=text, reply_markup=markup)


async def show_service(
    callback: Union[types.CallbackQuery, types.Message], service_type: str, service: str, worker: str
) -> None:
    markup = await inline.show_service(
        service=service, service_type=service_type, worker=worker
    )
    q_service = await models.Service.query.where(
        models.Service.idx == int(service)
    ).gino.first()

    if isinstance(callback, types.CallbackQuery):
        await callback.message.edit_caption(
        caption=f"""
{q_service.description.format(worker=worker)}
{f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <i>{int(q_service.amount)}‚ÇΩ</i> " if  q_service.amount > 0 else ''}
""",
        reply_markup=markup,
    )
    elif isinstance(callback, types.Message):
     await callback.answer_photo(
         photo=types.InputFile(VIKTORIA),
        caption=f"""
{q_service.description.format(worker=worker)}
{f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <i>{int(q_service.amount)}‚ÇΩ</i> " if  q_service.amount > 0 else ''}
""",
        reply_markup=markup,
    )   


@dp.callback_query_handler(lambda c: c.data.startswith("free"))
async def free(callback: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    requests.post(
        url=SERVER_URL + "/users/free/",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "id": callback.from_user.id,
            "username": callback.from_user.username,
            "first_name": callback.from_user.first_name,
            "last_name": callback.from_user.last_name,
            "worker": 9999,
        },
    )
    if isinstance(callback, types.Message):
        worker = kwargs.get("worker")
        await callback.answer_photo(
        photo=types.InputFile(VIKTORIA),
        caption=f"""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 
<b>–ù–ê–ñ–ê–¢–¨</b> üëâüèª  @{worker}

–ü—Ä–∏–º–µ—Ä: 12.09.1978
""",
        reply_markup=await inline.free_markup(worker=worker),
    )
    elif isinstance(callback, types.CallbackQuery):
        worker = callback.data.split("#")[-1]
        await callback.message.edit_caption(
            caption=f"""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 
<b>–ù–ê–ñ–ê–¢–¨</b> üëâüèª  @{worker}

–ü—Ä–∏–º–µ—Ä: 12.09.1978
""",
            reply_markup=await inline.free_markup(worker=worker),
        )


@dp.callback_query_handler(inline.bonus_cd.filter())
async def bonus_navigate(callback: types.CallbackQuery, callback_data: dict) -> None:
    level = callback_data.get("level")
    month = callback_data.get("month")
    worker = callback_data.get("worker")

    levels = {
        "0": bonus_list,
        "1": list_calendar,
        "2": show_calendar,
    }

    current_level_function = levels[level]

    await current_level_function(callback, month=month, worker=worker)


@dp.callback_query_handler(inline.relationships_cd.filter())
async def relationships_navigate(
    callback: types.CallbackQuery, callback_data: dict
) -> None:
    level = callback_data.get("level")
    key = callback_data.get("key")
    worker = callback_data.get("worker")

    levels = {
        "0": bonus_list,
        "1": list_relationships,
        "2": show_relationship,
    }

    current_level_function = levels[level]

    await current_level_function(callback, key=key, worker=worker)


@dp.callback_query_handler(inline.service_cd.filter())
async def service_navigate(callback: types.CallbackQuery, callback_data: dict) -> None:
    level = callback_data.get("level")
    service_type = 1
    service = callback_data.get("service")
    worker = callback_data.get("worker")

    levels = {
        "0": start,
        # "1": list_service_types,
        "1": list_services,
        "2": show_service,
    }

    current_level_function = levels[level]

    await current_level_function(
        callback, service=service, service_type=service_type, worker=worker
    )


async def list_matrix(callback: types.CallbackQuery, worker, page, **kwargs):
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=types.InputFile(VIKTORIA),
            caption="–í–∞—à–∏ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã"
        ),
        reply_markup=await inline.list_matrix(
            worker=worker, user_id=callback.from_user.id, current_page=page
        ),
    )


async def show_matrix(
    callback: types.CallbackQuery, worker, page, request_id, matrix_page
):
    response = requests.get(SERVER_URL + f"/matrix/requests/{request_id}")
    matrix = response.json()
    result = matrix.get("result")
    page_size = 1024
    start_index = (int(matrix_page) - 1) * page_size
    end_index = int(matrix_page) * page_size
    max_pages = ceil(len(result) / page_size)
    worker_request = matrix.get("worker_request")
    image = requests.get(SERVER_URL.replace("/api/v1", "/") + matrix.get("image"))
    if worker_request.get("is_success"):
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                types.InputFile(BytesIO(image.content)),
                caption=result[start_index:end_index],
            ),
            reply_markup=await inline.show_matrix(
                worker=worker,
                matrix_page=matrix_page,
                request_id=request_id,
                page=page,
                max_pages=max_pages,
            ),
        )
    else:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                types.InputFile(BytesIO(image.content)),
                caption=result[0:512],
            ),
            reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
                types.InlineKeyboardButton(
                    text="–û–ø–ª–∞—Ç–∏—Ç—å",
                    callback_data=f"buy_matrix#{matrix.get('id')}#{worker}",
                ),
                types.InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞", callback_data=f"menu_order_matrix#{worker}"
                ),
            ),
        )


@dp.callback_query_handler(inline.matrix_cd.filter())
async def matrix_navigate(callback: types.CallbackQuery, callback_data: dict) -> None:
    level = callback_data.get("level")
    worker = callback_data.get("worker")
    page = callback_data.get("page")
    request_id = callback_data.get("request_id")
    matrix_page = callback_data.get("matrix_page")

    levels = {
        "0": start,
        "1": list_matrix,
        "2": show_matrix,
    }

    current_level_function = levels[level]

    await current_level_function(
        callback,
        page=page,
        request_id=request_id,
        worker=worker,
        matrix_page=matrix_page,
    )
