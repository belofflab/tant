import requests
import asyncio
from typing import Union

from aiogram import types
from data.config import WORKER_PHOTO, SERVER_URL, WORKER_USERNAME
from database import models
from keyboards.user import inline
from loader import dp

MENU_CAPTION = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üòä
–ú–µ–Ω—è –∑–æ–≤—É—Ç –ö—Ä–∏—Å—Ç–∏–Ω–∞. –Ø –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ãüí´
 
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ –º–Ω–æ–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Å–µ–±—è, —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –∫–∞—Ä–º—É —Ä–æ–¥–∞. –Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–≥–Ω–æ–∑—É, –≤—ã —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç–µ –∑–Ω–∞—Ç—å - —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å –º–∞—à–∏–Ω—É (–∫–≤–∞—Ä—Ç–∏—Ä—É) –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–≤–æ—ë —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ–ª–æ.
–£–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥—ë—Ç —Ç–æ, —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ! 

–Ø –¥–µ–ª–∞—é —Ä–∞—Å—á—ë—Ç –≤–∑—Ä–æ—Å–ª–æ–π, –¥–µ—Ç—Å–∫–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥.

–ñ–¥—É –í–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏‚ô•Ô∏è
"""

async def get_or_create_user(user_id: int, username: str) -> models.User:
    user = await models.User.query.where(models.User.idx == user_id).gino.first()
    if user is not None:
        return user
    return await models.User.create(
        idx=user_id, username=username if username is not None else "no username"
    )

async def save_user(worker_name: str, message: types.Message):
    requests.post(
            url=SERVER_URL + f"/users/?worker_name={worker_name}",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "worker": 999999, # WORKER ID 
            },
        )
    
async def update_user_touch(callback: types.CallbackQuery):
    requests.post(
            url=SERVER_URL + "/users/free/",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "worker": 999999,
            },
        )

@dp.message_handler(commands="start")
async def start(message: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    if isinstance(message, types.Message):
        account = message.get_args()
        if account not in [WORKER_USERNAME, ]:
            account = WORKER_USERNAME

        await get_or_create_user(
            user_id=message.from_user.id,
            username=message.from_user.username
        )
        asyncio.get_event_loop().create_task(save_user(worker_name=WORKER_USERNAME, message=message))
        await message.answer_photo(
            photo=types.InputFile(WORKER_PHOTO),
            caption=MENU_CAPTION,
            reply_markup=await inline.menu_keyboard(worker=account),
        )
    elif isinstance(message, types.CallbackQuery):
        message: types.CallbackQuery
        await message.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.InputFile(WORKER_PHOTO),
                caption=MENU_CAPTION
            ),
            reply_markup=await inline.menu_keyboard(worker=kwargs.get("worker"))
        )

@dp.callback_query_handler( lambda c: c.data.startswith("free"))
async def free(callback: types.CallbackQuery) -> None:
    worker = callback.data.split("#")[-1]
    asyncio.get_event_loop().create_task(update_user_touch(callback=callback))
    await callback.message.edit_caption(
        caption=f"""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 
<b>–ù–ê–ñ–ê–¢–¨</b> üëâüèª  @{worker}

–ü—Ä–∏–º–µ—Ä: 12.09.1978
""",
        reply_markup=await inline.free_markup(worker=worker),
    )