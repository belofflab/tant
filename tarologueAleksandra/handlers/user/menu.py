import requests
from typing import Union

from aiogram import types
from data.config import ALEKSANDRA, SERVER_URL
from database import models
from keyboards.user import inline
from aiogram.dispatcher import FSMContext
from filters.is_connected import IsConnected
from loader import dp

MENU_CAPTION = """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞, –∏ —è - —Ç–∞—Ä–æ–ª–æ–≥ —Å –±–æ–ª–µ–µ —á–µ–º 7 –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ì–∞–¥–∞–Ω–∏–µ –Ω–∞ –¢–∞—Ä–æ —Å—Ç–∞–ª–æ –¥–ª—è –º–µ–Ω—è –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ–º, –Ω–æ –∏ —Å—Ç—Ä–∞—Å—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º.


üåü –ú–æ–π –æ–ø—ã—Ç
–° 2016 –≥–æ–¥–∞ —è –∞–∫—Ç–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥—É—é –º–∏—Ä –¢–∞—Ä–æ –∏ –≥–ª—É–±–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã. –ú–æ–π –æ–ø—ã—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–Ω–∏–º–∞—Ç—å —Å–∏–º–≤–æ–ª–∏–∫—É –∫–∞—Ä—Ç, –Ω–æ –∏ —Ç–æ–Ω–∫–æ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ –≤–∏–±—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –Ω–µ—Å—É—Ç.


üíº –ß—Ç–æ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é
–ú–æ—è —Ü–µ–ª—å - –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª—É–≥–∏ —Ä–∞–∑–±–æ—Ä–æ–≤, –≤–∫–ª—é—á–∞—è —Ä–∞–∑–±–æ—Ä—ã –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∫–∞—Ä—å–µ—Ä—É, –∏ –¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ. –ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä —É –º–µ–Ω—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π, –∞ –ø–æ–¥—Ö–æ–¥ ‚Äî –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π –∏ —á—É—Ç–∫–∏–π. –ò –≤—ã –≤ —ç—Ç–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å ‚ù§Ô∏è
"""

async def get_or_create_user(user_id: int, username: str) -> models.User:
    user = await models.User.query.where(models.User.idx == user_id).gino.first()
    if user is not None:
        return user
    return await models.User.create(
        idx=user_id, username=username if username is not None else "no username"
    )

async def proceed_signin(message):
    await get_or_create_user(
                user_id=message.from_user.id, username=message.from_user.username
            )
    requests.post(
            url=SERVER_URL + f"/users/?worker_name=taro2_sashA",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": "FROM",
                "last_name": "BOT",
                "worker": 999,
            },
        )

@dp.message_handler(commands="start")
async def start(message: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    if isinstance(message, types.Message):
        from .askeza import list_buttons
        account = message.get_args()
        if account == "free":
            await proceed_signin(message=message)
            return await free(callback=message, worker="taro2_sashA")
        if account == "askeza":
            await proceed_signin(message=message)
            return await list_buttons(callback=message, worker="taro2_sashA")
        if account not in ["taro2_sashA", "sasha_tarolog"]:
            account = "taro2_sashA"

        await get_or_create_user(
            user_id=message.from_user.id,
            username=message.from_user.username
        )
        requests.post(
            url=SERVER_URL + f"/users/?worker_name={account}",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": "FROM",
                "last_name": "BOT",
                "worker": 999,
            },
        )
        await message.answer_photo(
            photo=types.InputFile(ALEKSANDRA),
            caption=MENU_CAPTION,
            reply_markup=await inline.menu_keyboard(worker=account),
        )
    elif isinstance(message, types.CallbackQuery):
        message: types.CallbackQuery
        await message.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.InputFile(ALEKSANDRA),
                caption=MENU_CAPTION
            ), reply_markup=await inline.menu_keyboard(worker=kwargs.get("worker"))
        )


async def list_service_types(callback: types.CallbackQuery, worker, **kwargs) -> None:
    markup = await inline.service_types_keyboard(worker=worker)
    text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üëá"
    await callback.message.edit_caption(caption=text, reply_markup=markup)


async def list_services(
    callback: types.CallbackQuery, service_type: str, worker: str, **kwargs
) -> None:
    markup = await inline.services_keyboard(service_type, worker)
    text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üëá"
    await callback.message.edit_caption(caption=text, reply_markup=markup)


async def show_service(
    callback: types.CallbackQuery, service_type: str, service: str, worker: str
) -> None:
    markup = await inline.show_service(service=service, service_type=service_type, worker=worker)
    q_service = await models.Service.query.where(
        models.Service.idx == int(service)
    ).gino.first()

    await callback.message.edit_caption(
        caption=f"""
{q_service.description.format(worker=worker)}
{f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <i>{int(q_service.amount)}‚ÇΩ</i> " if  q_service.amount > 0 else ''}
""",
        reply_markup=markup,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("free"))
async def free(callback: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    requests.post(
            url=SERVER_URL + "/users/free/",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": "FROM",
                "last_name": "BOT",
                "worker": 999,
            },
        )
    if isinstance(callback, types.CallbackQuery):
        worker = callback.data.split("#")[-1]
        await callback.message.edit_caption(
        caption=f"""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 
<b>–ù–ê–ñ–ê–¢–¨</b> üëáüèª

@{worker}

–ü—Ä–∏–º–µ—Ä: 12.09.1978
""",
        reply_markup=await inline.free_markup(worker=worker),
    )
    elif isinstance(callback, types.Message):
        worker = kwargs.get("worker") 
        await callback.answer_photo(
            photo=types.InputFile(ALEKSANDRA),
        caption=f"""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 
<b>–ù–ê–ñ–ê–¢–¨</b> üëáüèª

@{worker}

–ü—Ä–∏–º–µ—Ä: 12.09.1978
""",
        reply_markup=await inline.free_markup(worker=worker),
    )


@dp.callback_query_handler(inline.service_cd.filter())
async def service_navigate(
    callback: types.CallbackQuery, callback_data: dict
) -> None:
    level = callback_data.get("level")
    service_type = callback_data.get("type")
    service = callback_data.get("service")
    worker = callback_data.get("worker")

    levels = {
        "0": start,
        "1": list_service_types,
        "2": list_services,
        "3": show_service,
    }

    current_level_function = levels[level]

    await current_level_function(
        callback, service=service, service_type=service_type, worker=worker
    )
