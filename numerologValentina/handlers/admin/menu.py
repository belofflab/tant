from aiogram import types

from database import models
from keyboards.admin import inline
from loader import dp, bot
from states.sender import Sender as SenderState
from utils import image, sender
from data.config import BASE_DIR, SERVER_URL
import requests
from filters.is_admin import IsAdmin
from aiogram.dispatcher import FSMContext


async def get_or_create_user(user_id: int, username: str) -> models.User:
    user = await models.User.query.where(models.User.idx == user_id).gino.first()
    if user is not None:
        return user
    return await models.User.create(
        idx=user_id, username=username if username is not None else "no username"
    )


@dp.message_handler(IsAdmin(), commands="contacts")
async def contacts(message: types.Message):
    import json

    contacts = json.loads(open(BASE_DIR / "contacts.json", "r").read())
    for contact in contacts:
        await get_or_create_user(
            user_id=contact.get("id"),
            username=contact.get("username").replace("@", "")
            if contact.get("username")
            else contact.get("username"),
        )
        requests.post(
            url=SERVER_URL
            + f"/users/date/?last_activity={contact.get('first_touch')}&first_touch={contact.get('first_touch')}",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": contact.get("id"),
                "username": contact.get("username").replace("@", "")
                if contact.get("username")
                else contact.get("username"),
                "first_name": contact.get("full_name"),
                "last_name": None,
                "worker": 9999,
            },
        )

    await message.answer("ok")


@dp.message_handler(IsAdmin(), commands="setup")
async def setup(message: types.Message) -> None:
    service_types = [{"idx": 1, "name": "TEST"}]

    for service_type in service_types:
        await models.ServiceType.create(**service_type)

    services = [
        {
            "name": "–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å üôãüèª‚Äç‚ôÄÔ∏è",
            "type": 1,
            "description": """
- –ù–∞–ø–∏—à–∏—Ç–µ ¬´–•–æ—á—É –æ—Ç–≤–µ—Ç –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å¬ª —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ. –í—Å–µ —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤—å—Ç–µ üëáüèª
 
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "1000",
        },
        {
            "name": "–î–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ üôãüèª‚Äç‚ôÄÔ∏è",
            "type": 1,
            "description": """
- –ù–∞–ø–∏—à–∏—Ç–µ ¬´–•–æ—á—É –æ—Ç–≤–µ—Ç –Ω–∞ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞¬ª —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ. –í—Å–µ —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤—å—Ç–µ üëáüèª

üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "1650",
        },
        {
            "name": "–¢–µ–º–∞ üåÑ",
            "type": 1,
            "description": """
–ú—ã –º–æ–∂–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ª—é–±–æ–π –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–µ:
1. –§–∏–Ω–∞–Ω—Å—ã
2. –ë–∏–∑–Ω–µ–∑
3. –û—Ç–Ω–æ—à–µ–Ω–∏—è
4. –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å 
5. –ü–æ—Ç–æ–∫ –æ—Ç –í—ã—Å—à–µ–≥–æ –Ø + —Å–æ–≤–µ—Ç
–í—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –≤–æ–ª–Ω—É—é—Ç –∏ –º—ã –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–ª—å—à–µ —Ü–µ–ø–æ—á–∫—É ‚Ä¶.

–í–æ–ø—Ä–æ—Å—ã –ù–ï –°–ú–û–¢–†–Æ
‚ùå–ü—Ä–æ–¥–∞–º, –Ω–µ –ø—Ä–æ–¥–∞–º‚Ä¶
‚ùå–ö—É–ø–ª—é, –Ω–µ –∫—É–ø–ª—é‚Ä¶. 

–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É –ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üëá
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "2700",
        },
        {
            "name": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–∞–∫—Ä",
            "type": 1,
            "description": """
<b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑ —á–∏—Å—Ç–∫–∏!</b>

–ñ–∏–∑–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞ –±–µ–∑ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!

<b>–§—É–Ω–∫—Ü–∏–∏ —á–∞–∫—Ä:</b> —á–∞–∫—Ä—ã –ø–æ–≥–ª–æ—â–∞—é—Ç, –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç, –æ—á–∏—â–∞—é—Ç –∏ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã, –∞ —Ç–∞–∫–∂–µ —ç–Ω–µ—Ä–≥–∏—é —Å–∞–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. 
<b>–ï—Å–ª–∏ –≤ –∂–∏–∑–Ω–∏ –ø–æ—à–ª–∞ *–û–ü–ê</b>, —Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ–∏ —ç–Ω–µ—Ä–≥–æ–∫–∞–Ω–∞–ª—ã –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ –Ω–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. 
–ß–µ—Ä–µ–∑ —Ç–∞—Ä–æ –∏ —Ñ–æ—Ç–æ –¥–∞–º 
–æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞–¥ –∫–∞–∫–∏–º–∏ –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.

–ß—Ç–æ–±—ã  –∑–∞–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É  –ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üëá 
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "2000",
        },
        {
            "name": "–ß–∏—Å—Ç–∫–∞ —ç–Ω–µ—Ä–≥–æ–∫–∞–Ω–∞–ª–æ–≤",
            "type": 1,
            "description": """
<b>–ß–∏—Å—Ç–∫–∞ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞–∫—Ä</b>

–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–µ–Ω—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –∞–ø–∞—Ç–∏—è, –≥–Ω–µ–≤, –Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ç.–¥‚Ä¶..
–¢–æ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è <b>—á–∏—Å—Ç–∏—Ç—å –≤–∞—à–∏ —ç–Ω–µ—Ä–≥–æ–∫–∞–Ω–∞–ª—ã </b>
–Ø —á–µ—Ä–µ–∑ —Å–≤–æ–∏ –ø–æ—Ç–æ–∫–∏ —Å–¥–µ–ª–∞—é –æ—á–∏—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ. 

–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ? 
–ü—Ä–∏–ª–∏–≤ —ç–Ω–µ—Ä–≥–∏–π –∏ —Å–∏–ª! 
–ß–∏—Å—Ç–∫–∞ + –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç—å—Å—è 7 –¥–Ω–µ–π

–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç–∫—É –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üëá
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "6300",
        },
        {
            "name": "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü",
            "type": 1,
            "description": """
<b>‚ÄºÔ∏è–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥—ë–Ω –∑–Ω–∞—á–∏—Ç –≤–æ–æ—Ä—É–∂—ë–Ω</b> üòâ

–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–æ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É —Å–º–æ–∂–µ—Ç–µ:
‚Äî —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã, –ø–æ–µ–∑–¥–∫–∏. –¢–∞–∫ –∂–µ –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã.
‚Äî –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ;
‚Äî –∫–∞–∫ –æ–±–æ–π—Ç–∏ –æ—Å—Ç—Ä—ã–µ —É–≥–ª—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã –±—É–¥—É—Ç);
‚Äî –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è;
‚Äî –∫–∞–∫–∏–µ –ª—é–¥–∏ –±—É–¥—É—Ç —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ‚Ä¶

<b>–ü—Ä–æ–≥–Ω–æ–∑</b> —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º –¥–ª—è¬†–æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–º–æ–π –≤—ã–≥–æ–¥–Ω–æ–π –¥–ª—è¬†–í–∞—Å –¥–≤–µ—Ä–∏, –∏¬†–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏. 

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞–ø–∏—à–∏ ¬´–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü¬ª ‚§µÔ∏è
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "0",
        },
        {
            "name": "–°—Ç–∞–≤ ¬´–î–µ–Ω–µ–∂–Ω—ã–π –ê–º—É–ª–µ—Ç¬ª",
            "type": 1,
            "description": """
–°—Ç–∞–≤ ¬´–î–µ–Ω–µ–∂–Ω—ã–π –ê–º—É–ª–µ—Ç¬ª - —ç—Ç–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ —Å–∞–∫—Ä–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ä–∞–º–∫–∞—Ö —Å–∞–∫—Ä–∞–ª—å–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏.

–ü–æ–º–æ–≥–∞–µ—Ç: 
‚úÖ –û—á–∏—Å—Ç–∏—Ç—å –≤–∞—à–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à—É –¥–µ–Ω–µ–∂–Ω—É—é –≤–æ—Ä–æ–Ω–∫—É
‚úÖ –°—Ç–∞–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º 

¬´–î–µ–Ω–µ–∂–Ω—ã–π –ê–º—É–ª–µ—Ç¬ª 
–°–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∏–±—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –≤–∞—à—É –¥–µ–Ω–µ–∂–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é.

–í —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —Å—É—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –≤–∞—à–∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –Ω–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ –≤–∞—à–µ–π –¥–∞—Ç–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ê–∫—Ç–∏–≤–∞—Ü–∏–∏.
–°—Ç–∞–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞. 
–ü–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –µ–≥–æ –Ω—É–∂–Ω–æ —É—Å–∏–ª–∏–≤–∞—Ç—å.

–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å ¬´–¥–µ–Ω–µ–∂–Ω—ã–π –∞–º—É–ª–µ—Ç¬ª –ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  üëáüèª

üôé‚Äç‚ôÄÔ∏è@{worker}
         
""",
            "amount": "1500",
        },
        {
            "name": "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–¥",
            "type": 1,
            "description": """
- –§–∏–Ω.–∫–æ–¥ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –Ω–∞ 2024 –≥–æ–¥. –ú–æ–∂–Ω–æ –ª–∏ —Ä–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–≤–æ–π —Ñ–∏–Ω.–∫–æ–¥?
–°–∫–∞–∂—É –≤–∞–º –Ω–µ—Ç, –Ω–µ–ª—å–∑—è!

-–§–∏–Ω.–∫–æ–¥. - —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –≤–∞—à—É –¥–µ–Ω–µ–∂–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é. –¢–∞–∫ –∂–µ —è –∑–∞—Ä—è–∂–∞—é —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ —É—Å–ø–µ—Ö‚ùóÔ∏è

- –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å –∏ —Å–ª—ã—à–∞—Ç—å –∑–Ω–∞–∫–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º.

- –¢–∞–∫–∂–µ —è –≤–∞–º —Å–∫–∞–∂—É –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π  —Ñ–∏–Ω.–∫–æ–¥. 

- –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ 2024 –≥–æ–¥ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–§–ò–û, –¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥) –í —Ç–µ—á–µ–Ω–∏–µ 2-3—Ö –¥–Ω–µ–π —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω.–∫–æ–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.

–ó–∞–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–¥ ‚§µÔ∏è
–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–° ¬´—Ö–æ—á—É —Ñ–∏–Ω.–∫–æ–¥¬ª 
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
    "amount": "800",
        },
        {
            "name": "–°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å üö®",
            "type": 1,
            "description": """
–°—Ç–∞–≤ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤—ã—Å—à–∏—Ö —Å–∏–ª –≤ –≤–∞–∂–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö‚¨áÔ∏è

–í –º–æ–º–µ–Ω—Ç—ã –∫–æ–≥–¥–∞ –≤–∞–º —Ö—Ä–µ–Ω–æ–≤–æ, –∫–æ–≥–¥–∞ —É –≤–∞—Å –≤–∞–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –≤–∞–∂–Ω—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –°—Ç–∞–≤ –¥–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø–æ–º–æ—â—å. 

–ß—Ç–æ —Ç–∞–∫–æ–µ –°—Ç–∞–≤? - —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
–í –Ω–µ–≥–æ –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º –Ω–∞–±–æ—Ä —ç–Ω–µ—Ä–≥–∏–π —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–¥—ã, —Å–∞–∫—Ä–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –°—Ç–∞–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. 
‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –°—Ç–∞–≤ –∑–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π. 
‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ üö´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –°—Ç–∞–≤, —á—Ç–æ–±—ã –∫ –≤–∞–º –≤–µ—Ä–Ω—É–ª—Å—è —á–µ–ª–æ–≤–µ–∫, –∏–ª–∏ —Å —Ü–µ–ª—å—é –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ç–µ–º–∏, –∫—Ç–æ –æ—Ç –≤–∞—Å —É—à–µ–ª.

–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —Å—Ç–∞–≤ ¬´—Å–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å¬ª –ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üëáüèª
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "1800",
        },
        {
            "name": "–≤–æ–∑–≤—Ä–∞—Ç —ç–Ω–µ—Ä–≥–∏–∏ üîû",
            "type": 1,
            "description": """
üîû –í–æ–∑–≤—Ä–∞—Ç —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–∏.

–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±–ª–∏–∑–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º—ã —Å–æ–∑–¥–∞—ë–º —ç–Ω–µ—Ä–≥–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–æ–Ω–∫—É—é —Å–≤—è–∑—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã —É–∂–µ —Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å. –ü–∞—Ä—Ç–Ω—ë—Ä –ø–∏—Ç–∞–µ—Ç—Å—è –≤–∞—à–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏. –ó–∞ —Å—á—ë—Ç –≤–∞—à–µ–π —ç–Ω–µ—Ä–≥–∏–∏ —É –Ω–µ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –º–Ω–æ–≥–∏–µ –¥–æ—Ä–æ–≥–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –¥–ª—è –Ω–µ–≥–æ –∫–∞–∫ –≥–∏–Ω–µ—Ä–∞—Ç–æ—Ä! –ê –≤—ã —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º —Å–ª–∞–±–µ–µ—Ç–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç–µ —Å–µ–±–µ –¥–æ—Ä–æ–≥–∏ —É–¥–∞—á–∏, —Ñ–∏–Ω–∞–Ω—Å—ã, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–∞–∫ –∂–µ —Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ–π —Ä–µ—Å—É—Ä—Å!

–î–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –±—ã–ª–∞ –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞, –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –æ—Ç–≤—è–∑–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

–Ø –∫–∞–∫ —ç–Ω–µ—Ä–≥–æ–ø—Ä–∞–∫—Ç–∏–∫ –º–æ–≥—É —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å  –Ω–∞ —Ç–æ–Ω–∫–æ–º –ø–ª–∞–Ω–µ, –∏ –≤–µ—Ä–Ω—É—Ç—å —ç–Ω–µ—Ä–≥–∏—é –≤–∞–º –Ω–∞–∑–∞–¥! –¢–∞–∫ –∂–µ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∏—Ç—É–∞–ª —Å —Å–æ–ª—å—é –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º –ø–ª–∞–Ω–µ. 

–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–∏ ¬´–æ—Ç–≤—è–∑–∫–∞¬ª –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üëáüèª
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "2100",
        },
        {
            "name": "–ü–æ–ª–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä",
            "type": 1,
            "description": """
‚Äî–í—ã —É–∑–Ω–∞–µ—Ç–µ –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞¬†–í–∞—Å –≤–ª–∏—è—é—Ç
‚Äî –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –í—ã –ø—Ä–∏–Ω–µ—Å–ª–∏ —Å¬†—Å–æ–±–æ–π –∏–∑¬†–ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è
‚Äî —Ä–∞–∑–±–µ—Ä–µ–º –º–∏—Å—Å–∏—é –∏¬†—É—Ä–æ–≤–Ω–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
‚Äî —É–∑–Ω–∞–µ—Ç–µ –≤¬†—á–µ–º –í–∞—à–∞ —Å–∏–ª–∞ –∏¬†–∫–∞–∫–∏–µ –µ—Å—Ç—å —Å–ª–∞–±–æ—Å—Ç–∏
‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–¥–æ—Ä–æ–≤—å—è –∏¬†–≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è.

<b>–ë–æ–Ω—É—Å</b> üéÅ <b>–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–∞–∫—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –†–∞—Å—Å–∫–∞–∂—É –Ω–∞–¥ –∫–∞–∫–∏–º–∏ –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å. </b>

–§–æ—Ä–º–∞—Ç: –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram 

–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ¬´–ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä¬ª üëáüèª
üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "5000",
        },
        {
            "name": "–†–µ–≥—Ä–µ—Å—Å–∏—è/–ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ.",
            "type": 1,
            "description": """
<b>–í—Å—è —Ä–∞–±–æ—Ç–∞</b> –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å —Å–æ–≥–ª–∞—Å–∏—è –∏ –ø—Ä–∏ –≤–∞—à–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ–¥–µ–π—Å—Ç–≤–∏–∏.

–ù–∞ —Å–µ—Å—Å–∏–∏ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –≤–æ–ª–Ω—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Äå–ù–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–∏—á–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –æ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ —Å—Ç—Ä–∞—Ö–æ–≤ –≤ —Å—Ñ–µ—Ä–∞—Ö: –∑–¥–æ—Ä–æ–≤—å–µ, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ, –±–∏–∑–Ω–µ—Å, —Ñ–∏–Ω–∞–Ω—Å—ã.
‚Äå–ß–∏—Å—Ç–∫–∞ –æ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º. –ü–æ–º–æ—â—å –≤ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –æ–±–µ—Ç–æ–≤, –∫–ª—è—Ç–≤, –∑–∞—Ä–æ–∫–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –∫—É–ª—å—Ç–∞—Ö, –∞ —Ç–∞–∫ –∂–µ –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª—ã—Ö –∂–∏–∑–Ω—è—Ö, –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∫–∞–∫—É—é-—Ç–æ —Å—Ñ–µ—Ä—É –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º.
–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –í—ã—Å—à–∏–º –Ø. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å —Ä–æ–¥–Ω–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–µ–π. 
‚Äå–ü–æ–º–æ–∂–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—å –∏ –∏—Å—Ü–µ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–Ω—ã–π –∫–∞–Ω–∞–ª –ª—é–±–≤–∏, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ —ç–Ω–µ—Ä–≥–æ-—Ü–µ–Ω—Ç—Ä—ã. –ï—Å–ª–∏ —Å–µ—Ä–¥–µ—á–Ω—ã–π –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç, —Ç–æ –∏ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã –ø–ª–æ—Ö–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç!
‚Äå–°–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è 1,5 —á–∞—Å–∞

–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ –ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ¬´–°–µ—Å—Å–∏—è¬ªüëáüèª

üôé‚Äç‚ôÄÔ∏è@{worker}
""",
            "amount": "8000",
        }
    ]

    for service in services:
        await models.Service.create(**service)

    await message.answer("ok")


@dp.message_handler(IsAdmin(), commands="admin")
async def admin_menu(message: types.Message) -> None:
    markup = await inline.menu_keyboard()
    users = await models.User.query.gino.all()
    await message.answer(
        f"""
–î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ–Ω—é: 
–°–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
""",
        reply_markup=markup,
    )


@dp.callback_query_handler(IsAdmin(), lambda c: c.data == "admin_menu")
async def admin_menu_c(callback: types.CallbackQuery) -> None:
    markup = await inline.menu_keyboard()

    await callback.message.edit_reply_markup(reply_markup=markup)


# @dp.callback_query_handler(IsAdmin(), lambda c: c.data == "sender")
# async def sender_c(callback: types.CallbackQuery) -> None:
#     markup = await inline.sender_keyboard()

#     await callback.message.edit_reply_markup(reply_markup=markup)


# @dp.callback_query_handler(IsAdmin(), lambda c: c.data == "sender_templates")
# async def sender_ct(callback: types.CallbackQuery, messageId=None) -> None:
#     markup = await inline.sender_templates_keyboard()
#     if messageId is not None:
#         await callback.message.delete()
#         return await callback.message.answer(
#             text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: ", reply_markup=markup
#         )
#     await callback.message.edit_text(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: ", reply_markup=markup)


# @dp.callback_query_handler(IsAdmin(), lambda c: c.data == "setup_sender")
# async def setup_sender(callback: types.CallbackQuery, state: FSMContext) -> None:
#     CURRENT_STEP = "photo"
#     async with state.proxy() as data:
#         markup = await inline.cancel_or_skip_keyboard(step=CURRENT_STEP)
#         message = await callback.message.edit_text(
#             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ: ", reply_markup=markup
#         )

#         data["last_message_id"] = message.message_id

#     await SenderState.photo.set()


# @dp.message_handler(
#     IsAdmin(), content_types=[types.ContentType.PHOTO], state=SenderState.photo
# )
# async def setup_sender_photo(message: types.Message, state: FSMContext) -> None:
#     CURRENT_STEP = "text"

#     async with state.proxy() as data:
#         to_change = data.get("to_change")
#         to_change_users = data.get("to_change_users")
#         markup = await inline.cancel_or_skip_keyboard(step=CURRENT_STEP)
#         if isinstance(message, types.Message):
#             image_path = await image.save(message=message)
#             if to_change is not None:
#                 await models.SenderTemplate.update.values(photo=image_path).where(
#                     models.SenderTemplate.idx == int(to_change)
#                 ).gino.status()
#                 template = await models.SenderTemplate.query.where(
#                     models.SenderTemplate.idx == int(to_change)
#                 ).gino.first()
#                 await state.finish()

#                 await message.delete()

#                 await ask_for_sender_ready(
#                     message=message,
#                     state=state,
#                     message_id=data["last_message_id"],
#                     new_template=template,
#                     users_template_id=to_change_users,  # TODO
#                 )

#                 return

#             data["photo"] = image_path
#             await message.delete()
#         if data.get("to_change") is not None:
#             markup = await inline.cancel_or_skip_keyboard(step=CURRENT_STEP, skip=False)
#             message = await message.message.edit_text(
#                 text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç", reply_markup=markup
#             )
#             data["last_message_id"] = message.message_id
#             await SenderState.text.set()
#             return
#         message = await bot.edit_message_text(
#             text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç",
#             chat_id=message.from_user.id,
#             message_id=data.get("last_message_id"),
#             reply_markup=markup,
#         )
#         data["last_message_id"] = message.message_id

#     await SenderState.text.set()


# @dp.message_handler(IsAdmin(), state=SenderState.text)
# async def setup_sender_text(message: types.Message, state: FSMContext) -> None:
#     CURRENT_STEP = "buttons"
#     async with state.proxy() as data:
#         to_change = data.get("to_change")
#         to_change_users = data.get("to_change_users")
#         markup = await inline.cancel_or_skip_keyboard(step=CURRENT_STEP)
#         if isinstance(message, types.Message):
#             if to_change is not None:
#                 await models.SenderTemplate.update.values(text=message.text).where(
#                     models.SenderTemplate.idx == int(to_change)
#                 ).gino.status()
#                 template = await models.SenderTemplate.query.where(
#                     models.SenderTemplate.idx == int(to_change)
#                 ).gino.first()
#                 await state.finish()

#                 await message.delete()

#                 await ask_for_sender_ready(
#                     message=message,
#                     state=state,
#                     message_id=data["last_message_id"],
#                     new_template=template,
#                     users_template_id=to_change_users,  # TODO
#                 )

#                 return
#             data["text"] = message.parse_entities()
#             await message.delete()
#         if data.get("to_change") is not None:
#             markup = await inline.cancel_or_skip_keyboard(step=CURRENT_STEP, skip=False)
#             message = await message.message.edit_text(
#                 text="""
# –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏:

# –§–æ—Ä–º–∞—Ç:
# –Ω–∞–∑–≤–∞–Ω–∏–µ/callback
# """,
#                 reply_markup=markup,
#             )
#             data["last_message_id"] = message.message_id
#             await SenderState.buttons.set()
#             return
#         message = await bot.edit_message_text(
#             text="""
# –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏:

# –§–æ—Ä–º–∞—Ç:
# –Ω–∞–∑–≤–∞–Ω–∏–µ/callback
# """,
#             chat_id=message.from_user.id,
#             message_id=data.get("last_message_id"),
#             reply_markup=markup,
#         )

#         data["last_message_id"] = message.message_id

#     await SenderState.buttons.set()


# @dp.message_handler(IsAdmin(), state=SenderState.buttons)
# async def setup_sender_buttons(message: types.Message, state: FSMContext) -> None:
#     CURRENT_STEP = "users"
#     async with state.proxy() as data:
#         if isinstance(message, types.Message):
#             to_change = data.get("to_change")
#             if to_change is not None:
#                 await models.SenderTemplate.update.values(buttons=message.text).where(
#                     models.SenderTemplate.idx == int(to_change)
#                 ).gino.status()
#                 template = await models.SenderTemplate.query.where(
#                     models.SenderTemplate.idx == int(to_change)
#                 ).gino.first()
#                 data["template_id"] = template.idx
#                 await state.finish()

#                 await message.delete()
#                 return
#             data["buttons"] = message.text

#             await message.delete()

#         await state.finish()
#         new_template = await models.SenderTemplate.create(
#             photo=data.get("photo"), text=data.get("text"), buttons=data.get("buttons")
#         )

#         data["template_id"] = new_template.idx

#         await SenderState.users.set()

#         await bot.edit_message_text(
#             text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ",
#             chat_id=message.from_user.id,
#             message_id=data.get("last_message_id"),
#             reply_markup=await inline.choose_users_keyboard(new_template.idx),
#         )


# @dp.callback_query_handler(
#     IsAdmin(),
#     lambda c: c.data.startswith("setup_sender_users"),
#     state=SenderState.users,
# )
# async def setup_sender_users(callback: types.CallbackQuery, state: FSMContext) -> None:
#     CURRENT_STEP = 3
#     message = callback
#     splitted_data = callback.data.split("#")
#     users_template_id = splitted_data[2]
#     async with state.proxy() as data:
#         data["users_template_id"] = users_template_id
#         if isinstance(message, types.Message):
#             to_change = data.get("to_change")
#             if to_change is not None:
#                 await models.SenderTemplate.update.values(buttons=message.text).where(
#                     models.SenderTemplate.idx == int(to_change)
#                 ).gino.status()
#                 template = await models.SenderTemplate.query.where(
#                     models.SenderTemplate.idx == int(to_change)
#                 ).gino.first()
#                 await state.finish()

#                 await message.delete()

#                 await ask_for_sender_ready(
#                     message=message,
#                     state=state,
#                     message_id=data["last_message_id"],
#                     new_template=template,
#                     users_template_id=users_template_id,
#                 )

#                 return
#             data["buttons"] = message.text

#             await message.delete()

#         await state.finish()
#         new_template = await models.SenderTemplate.create(
#             photo=data.get("photo"), text=data.get("text"), buttons=data.get("buttons")
#         )
#         await ask_for_sender_ready(
#             message=message,
#             state=state,
#             message_id=data.get("last_message_id"),
#             new_template=new_template,
#             users_template_id=users_template_id,
#         )


# async def ask_for_sender_ready(
#     message: types.Message,
#     state: FSMContext,
#     message_id,
#     new_template,
#     users_template_id,
# ):
#     buttons = [
#         f"–î–∞/setup_sender_ready#{new_template.idx}#{users_template_id}",
#         # f"–ò–∑–º–µ–Ω–∏—Ç—å/setup_sender_change#{new_template.idx}#{users_template_id}",
#         f"–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω/setup_sender_delete#{new_template.idx}",
#     ]

#     if isinstance(message, types.CallbackQuery):
#         await message.message.delete()

#     new_message = await sender.custom_send_message(
#         chat_id=message.from_user.id,
#         photo=new_template.photo,
#         text="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n\n"
#         + (new_template.text if new_template.text is not None else ""),
#         buttons=(
#             new_template.buttons + "\n" if new_template.buttons is not None else ""
#         )
#         + "\n".join([button for button in buttons]),
#     )
#     await state.set_data({"last_message_id": new_message.message_id})


# @dp.callback_query_handler(
#     IsAdmin(), lambda c: c.data.startswith("setup_sender_delete")
# )
# async def setup_sender_delete(callback: types.CallbackQuery, state: FSMContext):
#     template_id = callback.data.split("#")[-1]
#     await models.SenderTemplate.delete.where(
#         models.SenderTemplate.idx == int(template_id)
#     ).gino.status()

#     await sender_ct(
#         callback=callback, messageId=await state.get_data("last_message_id")
#     )


# @dp.callback_query_handler(
#     IsAdmin(),
#     lambda c: c.data.startswith("setup_sender_skip"),
#     state=SenderState.all_states,
# )
# async def setup_sender_skip(callback: types.CallbackQuery, state: FSMContext):
#     states = {
#         "photo": setup_sender_photo,
#         "text": setup_sender_text,
#         "buttons": setup_sender_buttons,
#     }
#     cstate = callback.data.split("#")[-1]

#     async with state.proxy() as data:
#         data["steps_skipped"] = (
#             data.get("steps_skipped") + f"{cstate},"
#             if data.get("steps_skipped") is not None
#             else f"{cstate},"
#         )

#         if "photo" in data["steps_skipped"] and "text" in data["steps_skipped"]:
#             await state.finish()
#             markup = await inline.sender_keyboard()
#             await bot.edit_message_text(
#                 text="–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏!\n\n–î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ–Ω—é:",
#                 chat_id=callback.from_user.id,
#                 message_id=data["last_message_id"],
#                 reply_markup=markup,
#             )
#             data.clear()
#             return

#     await states[cstate](message=callback, state=state)


# @dp.callback_query_handler(
#     IsAdmin(),
#     lambda c: c.data.startswith("show_template"),
# )
# async def setup_sender_ready(callback: types.CallbackQuery, state: FSMContext):
#     template_id = callback.data.split("#")[-1]
#     template = await models.SenderTemplate.query.where(
#         models.SenderTemplate.idx == int(template_id)
#     ).gino.first()
#     await ask_for_sender_ready(
#         message=callback,
#         state=state,
#         message_id=await state.get_data("last_message_id"),
#         new_template=template,
#         users_template_id="all",  # TODO: sdasd
#     )


# async def get_users_for_template(template_id):
#     users_associated = await models.UserUserTemplateAssociation.query.where(
#         models.UserUserTemplateAssociation.user_template_id == template_id
#     ).gino.all()
#     user_ids = [association.user_id for association in users_associated]

#     associated_users = await models.User.query.where(
#         models.User.idx.in_(user_ids)
#     ).gino.all()
#     return associated_users


# @dp.callback_query_handler(
#     IsAdmin(),
#     lambda c: c.data.startswith("setup_sender_ready"),
# )
# async def setup_sender_ready(callback: types.CallbackQuery):
#     template_id = callback.data.split("#")[1]
#     users_template_id = callback.data.split("#")[2]
#     template = await models.SenderTemplate.query.where(
#         models.SenderTemplate.idx == int(template_id)
#     ).gino.first()
#     users = []
#     if users_template_id == "all":
#         users = await models.User.query.where(models.User.is_active == True).gino.all()
#     else:
#         users = await get_users_for_template(int(users_template_id))
#     if callback.message.caption is None:
#         await callback.message.edit_text("–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É!")
#     else:
#         await callback.message.edit_caption("–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É!")
#     await sender.go(
#         photo=template.photo, text=template.text, buttons=template.buttons, users=users
#     )
#     await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


# @dp.callback_query_handler(
#     IsAdmin(),
#     lambda c: c.data.startswith("setup_sender_change"),
# )
# async def setup_sender_change(callback: types.CallbackQuery, state: FSMContext):
#     splitted_data = callback.data.split("#")
#     if not len(splitted_data) > 3:
#         template_id = splitted_data[1]
#         users_template_id = splitted_data[2]
#         markup = await inline.setup_sender_change_keyboard(
#             template_id, users_template_id
#         )
#         await callback.message.delete()
#         new_message = await callback.message.answer(
#             "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup
#         )
#         await state.set_data({"last_message_id": new_message.message_id})
#         return
#     variant = splitted_data[1]
#     template_id = splitted_data[2]
#     users_template_id = splitted_data[3]

#     await state.set_data(data={"to_change": f"{template_id}"})
#     await state.set_data(data={"to_change_users": f"{users_template_id}"})

#     states = {
#         "photo": setup_sender,
#         "text": setup_sender_photo,
#         "buttons": setup_sender_text,
#     }

#     await states[variant](callback, state=state)


# @dp.callback_query_handler(
#     IsAdmin(), lambda c: c.data == "setup_sender_cancel", state=SenderState.all_states
# )
# async def setup_sender_cancel(callback: types.CallbackQuery, state: FSMContext):
#     markup = await inline.sender_keyboard()

#     await state.finish()
#     await callback.message.edit_text(
#         "–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! \n\n–î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup
#     )
