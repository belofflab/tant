import requests
from typing import Union

from aiogram import types
from data.config import VALERIA, SERVER_URL
from database import models
from keyboards.user import inline
from aiogram.dispatcher import FSMContext
from filters.is_connected import IsConnected
from loader import dp

MENU_CAPTION = """
–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç üëã 
–ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–ª–∏–Ω–∞ , —è —Ç–∞—Ä–æ–ª–æ–≥üßô‚Äç‚ôÄÔ∏è

–ú–æ–π –ø—É—Ç—å –Ω–∞—á–∞–ª—Å—è –µ—â–µ —Å 2020 , –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å –≤—Å–µ —Å –æ–±—ã—á–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø–æ–¥—Ä—É–∂–∫–∞–º , –Ω–æ –Ω–∞ —ç—Ç–æ–º —è –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∞ –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ —Ç–µ–º—É —ç–∑–æ—Ç–µ—Ä–∏–∫–∏‚ú®

–°–µ–π—á–∞—Å —è —É–∂–µ –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö. –£ –º–µ–Ω—è —Å–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.–ù–µ —Å—Ç–æ–∏—Ç —Å—Ç–µ—Å–Ω—è—Ç—å—Å—è, —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É , –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Çü•∞
"""

async def get_or_create_user(user_id: int, username: str) -> models.User:
    user = await models.User.query.where(models.User.idx == user_id).gino.first()
    if user is not None:
        return user
    return await models.User.create(
        idx=user_id, username=username if username is not None else "no username"
    )

@dp.message_handler(commands="start")
async def start(message: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    if isinstance(message, types.Message):
        account = message.get_args()
        if account not in ["polina_tarolog", ]:
            account = "polina_tarolog"

        await get_or_create_user(
            user_id=message.from_user.id,
            username=message.from_user.username
        )
        requests.post(
            url=SERVER_URL + f"/users/?worker_name={account}",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": "FROM",
                "last_name": "BOT",
                "worker": 99,
            },
        )
        await message.answer_photo(
            photo=types.InputFile(VALERIA),
            caption=MENU_CAPTION,
            reply_markup=await inline.menu_keyboard(worker=account),
        )
    elif isinstance(message, types.CallbackQuery):
        message: types.CallbackQuery
        await message.message.edit_media(
            media = types.InputMediaPhoto(
                media=types.InputFile(VALERIA),
                caption=MENU_CAPTION
            ), reply_markup=await inline.menu_keyboard(worker=kwargs.get("worker"))
        )


async def list_service_types(callback: types.CallbackQuery, worker, **kwargs) -> None:
    markup = await inline.service_types_keyboard(worker=worker)
    text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üëá"
    await callback.message.edit_caption(caption=text, reply_markup=markup)


async def list_services(
    callback: types.CallbackQuery, service_type: str, worker: str, **kwargs
) -> None:
    markup = await inline.services_keyboard(service_type, worker)
    text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üëá"
    await callback.message.edit_caption(caption=text, reply_markup=markup)


async def show_service(
    callback: types.CallbackQuery, service_type: str, service: str, worker: str
) -> None:
    markup = await inline.show_service(service=service, service_type=service_type, worker=worker)
    q_service = await models.Service.query.where(
        models.Service.idx == int(service)
    ).gino.first()

    await callback.message.edit_caption(
        caption=f"""
{q_service.description.format(worker=worker)}
{f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <i>{int(q_service.amount)}‚ÇΩ</i> " if  q_service.amount > 0 else ''}
""",
        reply_markup=markup,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("free"))
async def free(callback: types.CallbackQuery) -> None:
    worker = callback.data.split("#")[-1]
    requests.post(
            url=SERVER_URL + "/users/free/",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": "FROM",
                "last_name": "BOT",
                "worker": 999,
            },
        )
    await callback.message.edit_caption(
        caption=f"""
‚úèÔ∏è–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ/–∏–º—è, –µ—Å–ª–∏ –æ–Ω —Å–≤—è–∑–∞–Ω —Å –≤–∞–º–∏, –µ—Å–ª–∏ –≤ —Ä–∞—Å–∫–ª–∞–¥–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ª—é–¥–∏, —Ç–æ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –∏—Ö —Ñ–æ—Ç–æ/–∏–º—è)

–í—Å—ë —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞—Ä–æ–ª–æ–≥—É –ü–æ–ª–∏–Ω–µ üëáüèª

@{worker}
""",
        reply_markup=await inline.free_markup(worker=worker),
    )


@dp.callback_query_handler(inline.service_cd.filter())
async def service_navigate(
    callback: types.CallbackQuery, callback_data: dict
) -> None:
    level = callback_data.get("level")
    service_type = callback_data.get("type")
    service = callback_data.get("service")
    worker = callback_data.get("worker")

    levels = {
        "0": start,
        # "1": list_service_types,
        "1": list_services,
        "2": show_service,
    }

    current_level_function = levels[level]

    await current_level_function(
        callback, service=service, service_type=service_type, worker=worker
    )
