import requests
from typing import Union

from aiogram import types
import os
import uuid
from data.config import NATALIA, SERVER_URL, CHANNEL_ID, BASE_DIR, SPACE, CASH, HELPFS
from math import ceil
from database import models
from keyboards.user import inline
from aiogram.dispatcher import FSMContext
from filters.is_connected import IsConnected
from states.matrix import Matrix
from states.matrix_buy import MatrixBuy
from io import BytesIO
from loader import dp, bot

MENU_CAPTION = """
<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–æ–π –º–∏–ª—ã–π –¥—Ä—É–≥!</b>

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—Ç–∞–ª–∏. 
–Ø –Ω—É–º–µ—Ä–æ–ª–æ–≥, –ø—Ä–∞–∫—Ç–∏–∫ –Ω–∞—É–∫–∏ –°—é—Ü–∞–π, —ç–Ω–µ—Ä–≥–æ–ø—Ä–∞–∫—Ç–∏–∫
–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–∫—É–Ω—É—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏—Ä –∫–∞—Ä–º–∏—á–µ—Å–∫–æ–π, —Å–∞–∫—Ä–∞–ª—å–Ω–æ–π, –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –∏ —Ä–µ–≥—Ä–µ—Å—Å–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏. –ú—ã –≤–º–µ—Å—Ç–µ —É–∑–Ω–∞–µ–º, –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ —Ç—ã –ø—Ä–∏—à—ë–ª –ø—Ä–æ–π—Ç–∏, –∫–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ö–∞—Ä–º—É, –∫–∞–∫–∏–µ –∑–∞–∫–æ–Ω—ã –ö–∞—Ä–º—ã –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞—Ä—É—à–∞—Ç—å. –ê –µ—â—ë —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ –∫–∞–∫–æ–º—É –ø—É—Ç–∏ –ª–µ–≥—á–µ –≤—Å–µ–≥–æ –ø–æ–π—Ç–∏ –≤ –∂–∏–∑–Ω–∏, –≤–µ–¥—å —É —Ç–µ–±—è –µ—Å—Ç—å —Ç—Ä–∏ –¥–æ—Ä–æ–≥–∏, –Ω–æ —Ç—ã —Å–∞–º –≤–ø—Ä–∞–≤–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –∏–∑ –Ω–∏—Ö. –Ø –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Å –∫–∞–∫–∏–º –ø–∞—Å–ø–æ—Ä—Ç–æ–º —Ç—ã –ø—Ä–∏—à—ë–ª –≤ —ç—Ç—É –∂–∏–∑–Ω—å –∏ –∫–∞–∫–∏–µ –≤–∑—è–ª —Å —Å–æ–±–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á. –ò —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ, —è –ø–æ–º–æ–≥—É –≤—ã—è–≤–∏—Ç—å –º–Ω–∏–º—ã–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –Ω–∞ —Ç–≤–æ—ë–º –ø—É—Ç–∏. 
–ê –µ—Å–ª–∏ —Ç—ã –ø–æ–¥–µ–ª–∞–µ—à—å –∑–Ω–∞—Ç—å –∫–∞–∫–æ–π –ü–†–ò–ó —Ç–µ–±—è –∂–¥—ë—Ç, –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –≤ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏—Ö –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, —Ç–æ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫–æ –º–Ω–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
"""


bonuses = {
    "0": {
        "text": "–ú–æ–Ω–µ—Ç–∫–∞",
        "description_media": CASH,
        "description": """
<b>–ú–æ–Ω–µ—Ç–∫–∞</b>

–û–¥–Ω–∏–º –∏–∑ –∑–Ω–∞–∫–æ–≤ –í—Å–µ–ª–µ–Ω–Ω–æ–π —è–≤–ª—è–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–∞—à–µ–ª –Ω–∞ —Å–≤–æ—ë–º –ø—É—Ç–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–Ω–∏–º–∏ –µ—ë –∏ –ø–æ–ª–æ–∂–∏ –≤ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ –∏–ª–∏ –ø–æ—Ä—Ç–º–æ–Ω–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ "–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –∂–∏—Ç—å –≤ –Ω–æ–≤—ã–π –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –¥–æ–º–∏–∫. –°–∫–æ—Ä–µ–µ –∑–æ–≤–∏ —Å—é–¥–∞ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏ –±–æ–ª—å—à–∏—Ö"
–ê —á—Ç–æ –¥–∞–ª—å—à–µ? –°–∫–æ—Ä–µ–µ –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è —Å –Ω–æ–º–∏–Ω–∞–ª–æ–º –º–æ–Ω–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –Ω–∞—à—ë–ª. –û–Ω–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–≤–æ–∏ –º—ã—Å–ª–∏, –∞ —Ç–∞–∫–∂–µ –∑–Ω–∞–∫–æ–º –°—É–¥—å–±—ã –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.
""",
        "options": {
            "1": "–ï—Å–ª–∏ —Ç—ã –Ω–∞—à–µ–ª —Ç–∞–∫—É—é –º–æ–Ω–µ—Ç—É - —Ç–µ–±—è –∂–¥—É—Ç –ø–µ—Ä–µ–º–µ–Ω—ã. –û–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–º –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞, —Å–≤–µ–∂–∏—Ö –∏–¥–µ–π –∏ –≤–µ–ª–∏–∫–∏—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π. –ï—Å–ª–∏ —Ç—ã –∂–¥–∞–ª –∑–Ω–∞–∫, —á—Ç–æ–±—ã —á—Ç–æ-—Ç–æ –Ω–∞—á–∞—Ç—å - –≤–æ—Ç –æ–Ω. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –í—Å–µ–ª–µ–Ω–Ω–∞—è –≥–æ–≤–æ—Ä–∏—Ç, —Å—Ç–æ –≤—Å–∫–æ—Ä–µ —Ç–µ–±—è –∂–¥—ë—Ç —É—Å–ø–µ—Ö.",
            "2": "–ó–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—ã—Ç–∞—Ç—å—Å—è –≤—Å–µ –¥–µ–ª–∞—Ç—å –≤ –æ–¥–∏–Ω–æ—á–∫—É. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –±–ª–∏–∂–Ω–∏—Ö - –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏. –ó–∞–¥—É–º–∞–π—Å—è –æ –ª—é–¥—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –æ–∫—Ä—É–∂–∞—é—Ç, –æ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –æ–±—â–µ–Ω–∏–∏ —Å –Ω–∏–º–∏. –ü–æ–≤–µ—Ä—å, —ç—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ —Å—á–∞—Å—Ç—å–µ. –°–æ—Ö—Ä–∞–Ω–∏ –º–æ–Ω–µ—Ç–∫—É, –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–ª–∏–∑–∫–∏–µ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.",
            "5": "–¢–∞–∫–∞—è –Ω–∞—Ö–æ–¥–∫–∞ —Å—É–ª–∏—Ç –¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–¥—à–µ–º—É. –≠—Ç–æ  —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –í—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏–ª—ã. –í –∫–∏—Ç–∞–π—Å–∫–∏—Ö —É—á–µ–Ω–∏—è—Ö —ç—Ç–æ —á–∏—Å–ª–æ - —Å–∏–º–≤–æ–ª —Ä–∞–¥–æ—Å—Ç–∏. –û–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ 5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–π: –±–æ–≥–∞—Ç—Å—Ç–≤–æ, —Å—á–∞—Å—Ç—å–µ, –¥–æ–ª–≥–æ–ª–µ—Ç–∏–µ, –∑–¥–æ—Ä–æ–≤—å–µ, –ø—Ä–æ–≥—Ä–µ—Å—Å. –ù–∞–π—Ç–∏ —Ç–∞–∫—É—é –º–æ–Ω–µ—Ç—É - –±–æ–ª—å—à–∞—è —É–¥–∞—á–∞",
            "10": "–≠—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å. –ï—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –¥–æ–≤–µ—Ä—å—Å—è –∏–Ω—Å—Ç–∏–Ω–∫—Ç–∞–º –∏ –ø–æ–ª–æ–∂–∏—Å—å –Ω–∞ —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é. –¢–µ–±—è –∂–¥—ë—Ç —É—Å–ø–µ—Ö –≤ —Ç–≤–æ—ë–º –¥–µ–ª–µ. –ù–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –í—Å–µ–ª–µ–Ω–Ω–∞—è, –≤—Å–µ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–æ –≤ —Ç–≤–æ—é –ø–æ–ª—å–∑—É.",
            "25": """
–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–Ω–∞–∫–æ–º –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –º–∞–ª–æ —Å–ø–∏—à—å, –ø–ª–æ—Ö–æ –ø–∏—Ç–∞–µ—à—å—Å—è –∏–ª–∏ –∑–∞—Å–∏–∂–∏–≤–∞–µ—à—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ. –£–¥–µ–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è —Å–µ–±–µ –∏ –ø–æ–º–Ω–∏ - –≤—Å–µ –¥–µ–Ω—å–≥–∏ –º–∏—Ä–∞ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ª—å–∑—è, –∫–∞–∫ –∏–º –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ. 

       PS. –°–∫–∞–∂—É —Ç–µ–±–µ –ø–æ —Å–µ–∫—Ä–µ—Ç—É, –∑–¥–æ—Ä–æ–≤—å–µ —É–ª—É—á—à–∏—Ç—å –º–æ–∂–Ω–æ.
 –•–æ—á–µ—à—å –∑–Ω–∞—Ç—å –∫–∞–∫‚ùì

–ü–∏—à–∏ –º–Ω–µ üëá
@Natali_numerologist
""",
            "50": """
–¢–∞–∫–∞—è –º–æ–Ω–µ—Ç–∞ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ —á—É–≤—Å—Ç–≤ –∏ —Å—Ç—Ä–∞—Å—Ç–∏. –≠—Ç–æ —Å–∏–ª–∞ —á–∏—Å–ª–∞ 5‚É£, —É—Å–∏–ª–µ–Ω–Ω–∞—è 0‚É£.–ß–∏—Å–ª–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –≤–ª–∞—Å—Ç–∏, –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –≤—ã—Å—à–∏—Ö –∏–¥–µ–∞–ª–æ–≤. 
     –ï—Å–ª–∏ —Ç—ã —Å–ø–µ—à–∏–ª, –∫–æ–≥–¥–∞ –∑–∞–º–µ—Ç–∏–ª –º–æ–Ω–µ—Ç–∫—É - —ç—Ç–æ –∑–Ω–∞–∫, —á—Ç–æ –ø–æ—Ä–∞ –∑–∞–º–µ–¥–ª–∏—Ç—å —Å–≤–æ–π —Ç–µ–º–ø. –ï—Å–ª–∏ –∂–µ —Ç—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Ç–æ —Ç–∞–∫–∞—è  –Ω–∞—Ö–æ–¥–∫–∞ —Å—É–ª–∏—Ç —Å–∫–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
""",
        },
    },
    "1": {
        "text": "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π",
        "description_media": HELPFS,
        "description": """
<b>–ü–æ–¥—Å–∫–∞–∑–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π</b>

–ó–∞–≥–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚ùì 
–∏ –ø–∏—à–∏ –º–Ω–µ üëá
@Natali_numerologist 
—Å–ª–æ–≤–æ <i>"–ö–ê–†–¢–ê"</i>
""",
        "options": {},
    },
}


relationships = {
    "0": {
        "name": '–ú–µ–¥–∏—Ç–∞—Ü–∏—è "–õ—é–±–æ–≤—å"',
        "description": """
<b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è "–õ—é–±–æ–≤—å"</b>

<i>"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é - –ø–æ–º–µ–Ω—è–π —Å–≤–æ—ë –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –Ω–µ–π"</i>

–í—Å–µ –º—ã —Å–ª—ã—à–∞–ª–∏ —ç—Ç–æ –≤—ã—Å–æ–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ –≤—Å–µ –ø–æ–Ω–∏–º–∞–µ–º –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –ö–∞–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–≤–æ—ë –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –º–∏—Ä—É, —Å–≤–æ–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é, –±–ª–∏–∑–∫–∏–º –∏ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–∫–æ–º—ã–º? –ö–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è? 
–ï—Å–ª–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏—è—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫: –æ–±–∏–¥–∞, –Ω–µ–Ω–∞–≤–∏—Å—Ç—å, –∑–ª–æ—Å—Ç—å, –Ω–µ–ø—Ä–∏—è–∑–Ω—å, —Ç–æ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏ —Å–º–æ–∂–µ—à—å —Å –ª—ë–≥–∫–æ—Å—Ç—å—é –≤–æ–π—Ç–∏ –≤ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.¬† –¢—ã –Ω–∞—á–Ω—ë—à—å –∏–∑–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–∂–µ. –ü–æ–¥–æ–±–Ω–æ–µ –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –ø–æ–¥–æ–±–Ω–æ–µ. 
–í—Å–µ–º –∂–µ–ª–∞—é –±–ª–∞–≥–æ—Å—Ç–∏ –∏ –¥–∞—Ä—é —ç—Ç—É –º–µ–¥–∏—Ç–∞—Ü–∏—é –≤ –∑–∞–ø–∏—Å–∏. 

<i>–ö—Ç–æ –∂–µ–ª–∞–µ—Ç –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ –≤ –º–æ–µ–º –ø–æ–ª–µ –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ, –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</i> üëá

@Natali_numerologist
""",
    }
}


async def get_or_create_user(user_id: int, username: str) -> models.User:
    user = await models.User.query.where(models.User.idx == user_id).gino.first()
    if user is not None:
        return user
    return await models.User.create(
        idx=user_id, username=username if username is not None else "no username"
    )


@dp.message_handler(commands="start")
async def start(message: Union[types.CallbackQuery, types.Message], **kwargs) -> None:
    if isinstance(message, types.Message):
        account = message.get_args()
        from .askeza import list_buttons

        if account == "askeza":
            await get_or_create_user(
                user_id=message.from_user.id, username=message.from_user.username
            )
            requests.post(
                url=SERVER_URL + f"/users/?worker_name=Natali_numerologist",
                headers={
                    "accept": "application/json",
                    "Content-Type": "application/json",
                },
                json={
                    "id": message.from_user.id,
                    "username": message.from_user.username,
                    "first_name": "FROM",
                    "last_name": "BOT",
                    "worker": 9999,
                },
            )
            return await list_buttons(callback=message, worker="Natali_numerologist")
        if account not in [
            "Natali_numerologist",
        ]:
            account = "Natali_numerologist"
        await get_or_create_user(
            user_id=message.from_user.id, username=message.from_user.username
        )
        requests.post(
            url=SERVER_URL + f"/users/?worker_name={account}",
            headers={
                "accept": "application/json",
                "Content-Type": "application/json",
            },
            json={
                "id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": "FROM",
                "last_name": "BOT",
                "worker": 9999999,
            },
        )
        await message.answer_photo(
            photo=types.InputFile(NATALIA),
            caption=MENU_CAPTION,
            reply_markup=await inline.menu_keyboard(worker=account),
        )
    elif isinstance(message, types.CallbackQuery):
        message: types.CallbackQuery
        await message.message.edit_media(
            media=types.InputMediaPhoto(
                media=types.InputFile(NATALIA), caption=MENU_CAPTION
            ),
            reply_markup=await inline.menu_keyboard(worker=kwargs.get("worker")),
        )


@dp.callback_query_handler(lambda c: c.data.startswith("order_matrix"))
async def order_matrix(callback: types.CallbackQuery, state: FSMContext):
    worker = callback.data.split("#")[-1]
    new_message = await callback.message.edit_caption(
        "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2000",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="order_matrix_back")
        ),
    )
    await Matrix.dob.set()
    await state.set_data({"last_message_id": new_message.message_id, "worker": worker})


@dp.callback_query_handler(lambda c: c.data == "order_matrix_back", state=Matrix.dob)
async def order_matrix_back(callback: types.CallbackQuery, state: FSMContext):
    cdata = await state.get_data()
    worker = cdata.get("worker")
    await state.finish()
    await start(message=callback, worker=worker)


@dp.callback_query_handler(lambda c: c.data.startswith("menu_order_matrix"))
async def order_matrix_menu(callback: types.CallbackQuery):
    worker = callback.data.split("#")[-1]
    await start(message=callback, worker=worker)


@dp.callback_query_handler(
    lambda c: c.data.startswith("menu_order_matrix"), state=MatrixBuy.receipt
)
async def order_matrix_cancel(callback: types.CallbackQuery, state: FSMContext):
    worker = callback.data.split("#")[-1]
    await state.finish()
    await start(message=callback, worker=worker)


@dp.message_handler(regexp=r"\d{2}.\d{2}.\d{4}", state=Matrix.dob)
async def order_matrix_dob(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        last_message_id = data["last_message_id"]
        dob = message.text
        await message.delete()
        new_message = await bot.edit_message_caption(
            chat_id=message.from_user.id,
            caption=f"–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob} —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n\n<b>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å...</b>",
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton(
                    text="–¥–∞", callback_data=f"order_matrix_confirm#{dob}"
                ),
                types.InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞", callback_data="order_matrix_back"
                ),
            ),
            message_id=last_message_id,
        )
        data["last_message_id"] = new_message.message_id


@dp.callback_query_handler(
    lambda c: c.data.startswith("order_matrix_confirm"), state=Matrix.dob
)
async def order_matrix_confirm(callback: types.CallbackQuery, state: FSMContext):
    dob = callback.data.split("#")[-1]
    cdata = await state.get_data("worker")
    worker = cdata.get("worker")
    await state.finish()
    await callback.message.edit_caption(
        caption=callback.message.caption + "\n\n–°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...."
    )
    response = requests.post(
        SERVER_URL + "/matrix/requests/",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "user": callback.from_user.id,
            "dob": dob,
        },
    )
    data = response.json()
    image = requests.get(SERVER_URL.replace("/api/v1", "/") + data.get("image"))

    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            types.InputFile(BytesIO(image.content)),
            caption=data.get("result")[:256]
            + "..."
            + "\n\n<b>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –æ–ø–ª–∞—Ç–∏—Ç–µ –æ—Ç—á—ë—Ç</b>",
        ),
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏—Ç—å",
                callback_data=f"buy_matrix#{data.get('id')}#{worker}",
            ),
            types.InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞", callback_data=f"menu_order_matrix#{worker}"
            ),
        ),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("deposit_request_confirm"))
async def deposit_request_confirm(callback: types.CallbackQuery):
    mrequest_id = int(callback.data.split("#")[1])
    wrequest_id = int(callback.data.split("#")[2])
    last_message_id = int(callback.data.split("#")[3])
    user_id = int(callback.data.split("#")[4])
    worker = callback.data.split("#")[5]

    response = requests.patch(
        SERVER_URL + "/worker/requests/",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "id": wrequest_id,
            "is_success": True,
            "comment": "string",
        },
    )
    response_data = response.json()
    await callback.message.edit_caption(
        caption=f"{callback.message.caption}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞"
    )
    response = requests.get(SERVER_URL + f"/matrix/requests/{mrequest_id}")
    matrix = response.json()
    result = matrix.get("result")
    page_size = 1024
    max_pages = ceil(len(result) / page_size)
    await bot.edit_message_caption(
        chat_id=user_id,
        caption=result[0:1024],
        reply_markup=await inline.show_matrix(
            worker=worker,
            matrix_page=1,
            request_id=matrix.get("id"),
            page=1,
            max_pages=max_pages,
        ),
        message_id=last_message_id,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("deposit_request_decline"))
async def deposit_request_decline(callback: types.CallbackQuery):
    mrequest_id = int(callback.data.split("#")[1])
    wrequest_id = int(callback.data.split("#")[2])
    last_message_id = int(callback.data.split("#")[3])
    user_id = int(callback.data.split("#")[4])
    worker = callback.data.split("#")[5]

    response = requests.patch(
        SERVER_URL + "/worker/requests/",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "id": wrequest_id,
            "is_success": False,
            "comment": "string",
        },
    )
    response_data = response.json()
    await callback.message.edit_caption(
        caption=f"{callback.message.caption}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    )
    await bot.edit_message_caption(
        chat_id=user_id,
        caption="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –º–∞—Ç—Ä–∏—Ü—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥", callback_data=f"menu_order_matrix#{worker}"
            )
        ),
        message_id=last_message_id,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("buy_matrix"))
async def buy_matrix(callback: types.CallbackQuery):
    mid = callback.data.split("#")[1]
    worker = callback.data.split("#")[2]
    await callback.message.edit_caption(
        caption="""
–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: <code>2202206742430668</code> –ù–ê–¢–ê–õ–¨–Ø –°.
–°—É–º–º–∞: <code>500</code>‚ÇΩ

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b> –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
""",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_buy_matrix#{mid}#{worker}"
            ),
            types.InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞", callback_data=f"menu_order_matrix#{worker}"
            ),
        ),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("confirm_buy_matrix"))
async def buy_matrix_confirm(callback: types.CallbackQuery, state: FSMContext):
    mid = callback.data.split("#")[1]
    worker = callback.data.split("#")[2]
    new_message = await callback.message.edit_caption(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–û—Ç–º–µ–Ω–∞", callback_data=f"menu_order_matrix#{worker}"
            )
        ),
    )
    await MatrixBuy.receipt.set()
    await state.set_data(
        {"mid": mid, "last_message_id": new_message.message_id, "worker": worker}
    )


@dp.message_handler(
    content_types=[types.ContentType.DOCUMENT, types.ContentType.PHOTO],
    state=MatrixBuy.receipt,
)
async def control_amount(message: types.Message, state: FSMContext) -> None:
    amount = 500
    document = message.document
    photo = message.photo
    last_message_id = await state.get_data("last_message_id")
    photo_to_delete = None
    if isinstance(document, types.Document):
        file_extension = os.path.splitext(document.file_name)[1]
        unique_filename = str(uuid.uuid4()) + file_extension
        file_info = await bot.get_file(document.file_id)
        file_path = file_info.file_path
        output_file = BASE_DIR / f"media/{unique_filename}"
        await bot.download_file(file_path, output_file)
        photo_to_delete = output_file
    elif isinstance(photo, list):
        file_info = await bot.get_file(photo[-1].file_id)
        file_extension = file_info.file_path.split(".")[-1]
        unique_filename = str(uuid.uuid4()) + "." + file_extension
        output_file = BASE_DIR / f"media/{unique_filename}"
        await photo[-1].download(destination_file=output_file)
        photo_to_delete = output_file
    params = {"worker": 5625107813, "amount": str(amount), "type": "deposit"}
    new_lead_status = False
    new_lead_data = {}

    with open(output_file, "rb") as file:
        new_lead_response = requests.post(
            SERVER_URL + f"/worker/requests/", params=params, files={"receipt": file}
        )
        if new_lead_response.status_code == 200:
            new_lead_status = True
            new_lead_data = new_lead_response.json()

    requests.patch(
        SERVER_URL + f"/matrix/requests/{last_message_id.get('mid')}/",
        params={
            "worker_request": new_lead_data.get("id"),
        },
        headers={
            "accept": "application/json",
        },
    )
    await message.delete()
    SUCCESS_MESSAGE = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–µ–∫! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã..."
    await state.finish()
    new_message = await bot.edit_message_caption(
        chat_id=message.from_user.id,
        caption=SUCCESS_MESSAGE,
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data=f"menu_order_matrix#{last_message_id.get('worker')}",
            )
        ),
        message_id=last_message_id.get("last_message_id"),
    )

    await bot.send_photo(
        chat_id=CHANNEL_ID,
        caption=f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –º–∞—Ç—Ä–∏—Ü—ã</b>\n\n–†–∞–±–æ—Ç–Ω–∏–∫: @{new_lead_data.get('worker').get('username')}\n–°—É–º–º–∞: {new_lead_data.get('amount')}‚ÇΩ",
        photo=types.InputFile(output_file),
        reply_markup=await inline.confirm_deposit_request_keyboard(
            last_message_id.get("mid"),
            new_lead_data.get("id"),
            new_message.message_id,
            message.from_user.id,
            worker=last_message_id.get("worker"),
        ),
    )

    os.remove(photo_to_delete)


@dp.callback_query_handler(lambda c: c.data.startswith("back_finance_code"))
async def back_finance_code(callback: types.CallbackQuery):
    worker = callback.data.split("#")[-1]
    await bonus_list(callback=callback, worker=worker)


@dp.callback_query_handler(lambda c: c.data.startswith("finance_code"))
async def finance_code(callback: types.CallbackQuery):
    worker = callback.data.split("#")[-1]
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=types.InputFile(BASE_DIR / "media/flower_cash.jpg"),
            caption=f"""
<b>–î–µ–Ω–µ–∂–Ω—ã–π –∫–æ–¥</b>

–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –∫–æ–¥? 

–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. 
–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è¬†¬†¬†¬†¬†¬†¬†¬† 17.08.1990

1. –°–∫–ª–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–æ —Ä–æ–∂–¥–µ–Ω–∏—è
1+7=8

2. –°–∫–ª–∞–¥—ã–≤–∞–µ–º –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è
0+8=8

3. –°–∫–ª–∞–¥—ã–≤–∞–µ–º –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
1+9+9+0=19=2+1=10=1+0=1

4. –°–∫–ª–∞–¥—ã–≤–∞–µ–º 3 –ø–æ–ª—É—á–∏–≤—à–∏—Ö—Å—è —Ü–∏—Ñ—Ä—ã
8+8+1=17=1+7=8

–í—É–∞–ª—è, üßö‚Äç‚ôÄ
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† –≤–∞—à –∫–æ–¥¬†¬†¬†<b> 8 8 1 8 </b>

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–¥, –ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èüëá 
@{worker}
—Å–ª–æ–≤–æ ¬´–ö–û–î¬ª
""",
        ),
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥", callback_data=f"back_finance_code#{worker}"
            )
        ),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("bonus"))
async def bonus_list(callback: types.CallbackQuery, **kwargs):
    worker = callback.data.split("#")[-1]
    kworker = kwargs.get("worker")
    if kworker is not None:
        worker = kworker
    bonuses = [
        {
            "text": "–ó–Ω–∞–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π  üëÄ",
            "callback_data": inline.make_bonus_cd(level=1, worker=worker),
        },
        {
            "text": "–ú–µ–¥–∏—Ç–∞—Ü–∏–∏ üßò‚Äç‚ôÄ",
            "callback_data": inline.make_relationships_cd(level=1, worker=worker),
        },
        # {"text": "–î–µ–Ω–µ–∂–Ω—ã–π –∫–æ–¥", "callback_data": f"finance_code#{worker}"},
    ]
    markup = types.InlineKeyboardMarkup(row_width=1)
    for bonus in bonuses:
        markup.add(types.InlineKeyboardButton(**bonus))
    markup.add(
        types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data=inline.make_service_cd(level=0)
        )
    )
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=types.InputFile(BASE_DIR / "media/natalia.jpg"), caption="üçÄ –ë–æ–Ω—É—Å—ã"
        ),
        reply_markup=markup,
    )


async def list_calendar(callback: types.CallbackQuery, worker: str, **kwargs):
    markup = types.InlineKeyboardMarkup(row_width=1)

    for key, value in bonuses.items():
        markup.row(
            types.InlineKeyboardButton(
                text=value["text"],
                callback_data=inline.make_bonus_cd(level=2, worker=worker, month=key),
            )
        )

    markup.add(
        types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data=inline.make_bonus_cd(level=0, worker=worker)
        )
    )

    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=types.InputFile(SPACE),
            caption="""
<b>–ó–Ω–∞–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π</b>

–í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ—Å—ã–ª–∞–µ—Ç –Ω–∞–º –∑–Ω–∞–∫–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏. –ì–ª–∞–≤–Ω–æ–µ, —É–º–µ—Ç—å –∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –≤–æ–≤—Ä–µ–º—è —É–≤–∏–¥–µ—Ç—å,¬† –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏. –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–æ–ª–∫–æ–≤–∞—Ç—å –∑–Ω–∞–∫–∏, –ø–æ—Å—ã–ª–∞–µ–º—ã–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π, –º–æ–∂–Ω–æ –∏–∑–±–µ–∂–∞—Ç—å –∫—É—á–∏ –ø—Ä–æ–±–ª–µ–º –∏ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–µ–π, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–ª–µ–≥—á–∏—Ç –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫—É. –¢—Ä—É–¥–Ω–æ —Å–∫–∞–∑–∞—Ç—å, –æ—Ç–∫—É–¥–∞ –±–µ—Ä—É—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏, –Ω–æ –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –∑–Ω–∞–µ—Ç, —á—Ç–æ –≥–¥–µ-—Ç–æ —Ç–∞–º, –µ—Å—Ç—å –í—ã—Å—à–∏–µ —Å–∏–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –æ–±–µ—Ä–µ–≥–∞—é—Ç, –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç, –ø–æ–º–æ–≥–∞—é—Ç, –ø–æ—Å—ã–ª–∞—è —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ä–æ–¥–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ –Ω–∞ –ó–µ–º–ª–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π. –ò –≤–∞–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è –∏—Ö –≤–∏–¥–µ—Ç—å, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å, –ø —Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ –ø–æ–º–æ—â–∏ –í—ã—Å—à–∏—Ö —Å–∏–ª.
""",
        ),
        reply_markup=markup,
    )


async def list_relationships(callback: types.CallbackQuery, worker: str, **kwargs):
    markup = types.InlineKeyboardMarkup(row_width=3)

    for idx, (key, value) in enumerate(relationships.items()):
        markup.row(
            types.InlineKeyboardButton(
                text=value["name"],
                callback_data=inline.make_relationships_cd(
                    level=2, worker=worker, key=key
                ),
            )
        )
    markup.add(
        types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=inline.make_relationships_cd(level=0, worker=worker),
        )
    )

    await callback.message.edit_caption(
        """–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏:""",
        reply_markup=markup,
    )


async def show_relationship(callback: types.CallbackQuery, key: str, worker: str):
    await callback.message.edit_caption(
        relationships[key]["description"],
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data=inline.make_relationships_cd(
                    level=1, worker=worker, key=key
                ),
            ),
        ),
    )


async def show_calendar(
    callback: types.CallbackQuery, month: str, worker: str, **kwargs
):
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=types.InputFile(bonuses[month]["description_media"]),
            caption=bonuses[month]["description"],
        ),
        reply_markup=types.InlineKeyboardMarkup().add(
            *[
                types.InlineKeyboardButton(
                    text=option,
                    callback_data=inline.make_bonus_cd(
                        level=3, worker=worker, month=month, option=option
                    ),
                )
                for option in bonuses[month]["options"]
            ],
            types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data=inline.make_bonus_cd(level=1, worker=worker, month=month),
            ),
        ),
    )


async def show_option(
    callback: types.CallbackQuery, month: str, worker: str, option: str, **kwargs
):
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=types.InputFile(BASE_DIR / f"media/{option}.jpg"),
            caption=bonuses[month]["options"][option],
        ),
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data=inline.make_bonus_cd(level=2, worker=worker, month=month),
            )
        ),
    )


async def list_service_types(callback: types.CallbackQuery, worker, **kwargs) -> None:
    markup = await inline.service_types_keyboard(worker=worker)
    text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üëá"
    await callback.message.edit_caption(caption=text, reply_markup=markup)


async def list_services(
    callback: types.CallbackQuery, service_type: str, worker: str, **kwargs
) -> None:
    markup = await inline.services_keyboard(service_type, worker)
    text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É üëá"
    await callback.message.edit_caption(caption=text, reply_markup=markup)


async def show_service(
    callback: types.CallbackQuery, service_type: str, service: str, worker: str
) -> None:
    markup = await inline.show_service(
        service=service, service_type=service_type, worker=worker
    )
    q_service = await models.Service.query.where(
        models.Service.idx == int(service)
    ).gino.first()

    await callback.message.edit_caption(
        caption=f"""
{q_service.description.format(worker=worker)}
{f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <i>{int(q_service.amount)}‚ÇΩ</i> " if  q_service.amount > 0 else ''}
""",
        reply_markup=markup,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("free"))
async def free(callback: types.CallbackQuery) -> None:
    worker = callback.data.split("#")[-1]
    requests.post(
        url=SERVER_URL + "/users/free/",
        headers={
            "accept": "application/json",
            "Content-Type": "application/json",
        },
        json={
            "id": callback.from_user.id,
            "username": callback.from_user.username,
            "first_name": "FROM",
            "last_name": "BOT",
            "worker": 9999,
        },
    )
    await callback.message.edit_caption(
        caption=f"""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ 
<b>–ù–ê–ñ–ê–¢–¨</b> üëâüèª  @{worker}

–ü—Ä–∏–º–µ—Ä: 12.09.1978
""",
        reply_markup=await inline.free_markup(worker=worker),
    )


@dp.callback_query_handler(inline.bonus_cd.filter())
async def bonus_navigate(callback: types.CallbackQuery, callback_data: dict) -> None:
    level = callback_data.get("level")
    month = callback_data.get("month")
    option = callback_data.get("option")
    worker = callback_data.get("worker")

    levels = {
        "0": bonus_list,
        "1": list_calendar,
        "2": show_calendar,
        "3": show_option,
    }

    current_level_function = levels[level]

    await current_level_function(callback, month=month, option=option, worker=worker)


@dp.callback_query_handler(inline.relationships_cd.filter())
async def relationships_navigate(
    callback: types.CallbackQuery, callback_data: dict
) -> None:
    level = callback_data.get("level")
    key = callback_data.get("key")
    worker = callback_data.get("worker")

    levels = {
        "0": bonus_list,
        "1": list_relationships,
        "2": show_relationship,
    }

    current_level_function = levels[level]

    await current_level_function(callback, key=key, worker=worker)


@dp.callback_query_handler(inline.service_cd.filter())
async def service_navigate(callback: types.CallbackQuery, callback_data: dict) -> None:
    level = callback_data.get("level")
    service_type = 1
    service = callback_data.get("service")
    worker = callback_data.get("worker")

    levels = {
        "0": start,
        # "1": list_service_types,
        "1": list_services,
        "2": show_service,
    }

    current_level_function = levels[level]

    await current_level_function(
        callback, service=service, service_type=service_type, worker=worker
    )


async def list_matrix(callback: types.CallbackQuery, worker, page, **kwargs):
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=types.InputFile(NATALIA), caption="–í–∞—à–∏ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã"
        ),
        reply_markup=await inline.list_matrix(
            worker=worker, user_id=callback.from_user.id, current_page=page
        ),
    )


async def show_matrix(
    callback: types.CallbackQuery, worker, page, request_id, matrix_page
):
    response = requests.get(SERVER_URL + f"/matrix/requests/{request_id}")
    matrix = response.json()
    result = matrix.get("result")
    page_size = 1024
    start_index = (int(matrix_page) - 1) * page_size
    end_index = int(matrix_page) * page_size
    max_pages = ceil(len(result) / page_size)
    worker_request = matrix.get("worker_request")
    image = requests.get(SERVER_URL.replace("/api/v1", "/") + matrix.get("image"))
    if worker_request.get("is_success"):
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                types.InputFile(BytesIO(image.content)),
                caption=result[start_index:end_index],
            ),
            reply_markup=await inline.show_matrix(
                worker=worker,
                matrix_page=matrix_page,
                request_id=request_id,
                page=page,
                max_pages=max_pages,
            ),
        )
    else:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                types.InputFile(BytesIO(image.content)),
                caption=result[0:512],
            ),
            reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
                types.InlineKeyboardButton(
                    text="–û–ø–ª–∞—Ç–∏—Ç—å",
                    callback_data=f"buy_matrix#{matrix.get('id')}#{worker}",
                ),
                types.InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞", callback_data=f"menu_order_matrix#{worker}"
                ),
            ),
        )


@dp.callback_query_handler(inline.matrix_cd.filter())
async def matrix_navigate(callback: types.CallbackQuery, callback_data: dict) -> None:
    level = callback_data.get("level")
    worker = callback_data.get("worker")
    page = callback_data.get("page")
    request_id = callback_data.get("request_id")
    matrix_page = callback_data.get("matrix_page")

    levels = {
        "0": start,
        "1": list_matrix,
        "2": show_matrix,
    }

    current_level_function = levels[level]

    await current_level_function(
        callback,
        page=page,
        request_id=request_id,
        worker=worker,
        matrix_page=matrix_page,
    )
